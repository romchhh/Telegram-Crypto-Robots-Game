import os
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, KeyboardButton, ContentTypes, ReplyKeyboardMarkup, \
    InputFile
    
import asyncio
import datetime
import time
import pytz


from aiogram.utils.markdown import hbold, hcode, hitalic
from bot import bot, dp, storage, scheduler, mdb
from data.functions.db import *
from data.functions.text import get_start_text, robot_chances_text
from data.functions.tournament import end_tour
from data.functions.squad import end_squad
from data.payments.cryptobot import create_cry_invoice
from data.payments.rocket import create_invoice
from data.functions.game import heal_user_robots, give_robot_to_user, check_game_valid
from filters import IsPrivate, IsSubscribed
from keyboards.users.keyboards import bet_key, deposit_key, back_key, withdraw_key, market_key, \
    my_robots_key, get_robot_keyboard, locations_key, bazar_key, nft_key, create_start_keyboard, withdraw_key_take
from states.users.states import DepositTon, WithdrawTon, DepositTake, DepositCry, WithdrawTake
from data.payments.tonscan_api import TonScan
from data.functions.db_squads import add_group_to_db, add_user_to_squad, get_squads_count, get_top_squads, get_top_payments

from data.payments.rocket import get_all_balance
from aiogram.dispatcher.filters import Command

from data.config import administrators, NFT_COLLECTIONS
from keyboards.admins.keyboards import cancel_adm_key, admin_key, admin_search_key, confirm_new_robot
from keyboards.users.keyboards import join_game_key, get_language_keyboard
from states.admins.states import SendAllPhoto, SendAllText, StartTour, EditUserBalance, SearchUser, NewRobot, \
    DeleteRobot
from data.functions.translate import translate_text

html = 'HTML'


async def scheduler_jobs():
    scheduler.add_job(end_tour, "interval", minutes=10)
    scheduler.add_job(end_squad, 'interval', minutes=60)
    scheduler.add_job(heal_user_robots, "interval", minutes=5)
    scheduler.add_job(check_game_valid, "interval", minutes=10)


async def antiflood(*args, **kwargs):
    m = args[0]
    await m.answer("–ù–µ —Å–ø–µ—à–∏ :)")


async def on_startup(dp):
    await scheduler_jobs()
    await bot.send_message(-1002069022449, "–ë–æ—Ç –∑–∞–ø—É—à–µ–Ω!")
    print(get_active_tour())


async def on_shutdown(dp):
    await storage.close()
    await bot.close()
    me = await bot.get_me()
    print(f'Bot: @{me.username}\n–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


@dp.message_handler(commands=['getid'])
async def get_id(msg: types.Message):
    await msg.answer(f'<code>{msg.chat.id}</code>')



@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def on_bot_added(message: types.Message):
    for new_member in message.new_chat_members:
        if new_member.id == (await bot.me).id:

            group_name = message.chat.title
            
            print(group_name)

            link = f'https://t.me/TonTakeRoBot?start=joinsquad_{message.chat.id}'
            inline_btn = InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–∫–≤–∞–¥—É", url=f'{link}')
            inline_kb = InlineKeyboardMarkup().add(inline_btn)

            welcome_text = (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫–≤–∞–¥—ã TonTakeRobot! ü§ñ\n\n"
                f"–ó–¥–µ—Å—å —Ç—ã –º–º–æ–∂–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ {group_name} —Å–∫–≤–∞–¥ –∏ –±–æ—Ä–æ—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ "
                "—Å–∫–∞–≤–∞–¥–∞–º–∏ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ. üèÜ\n\n"
                "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Å–∫–≤–∞–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –∑–∞–±–µ—Ä–µ—Ç –ø—Ä–∏–∑ –≤ "
                "—Ä–∞–∑–º–µ—Ä–µ 5% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –±–æ—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤ —Å–∫–≤–∞–¥–∞—Ö. üí∞\n\n"
                "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–∫–≤–∞–¥—É!"
            )

            await message.answer(welcome_text, reply_markup=inline_kb)

            leader_id = message.from_user.id
            add_group_to_db(message.chat.id, leader_id, group_name)  # –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            add_user_to_squad(message.chat.id, leader_id)


            
            
@dp.message_handler(IsPrivate(), commands=["start"])
@dp.throttled(antiflood, rate=1)
async def start(message: types.Message):
    user = message.from_user
    robots = mdb.get_user_robots(user.id)
    ref = 0

    if len(message.text) > 6:
        try:
            int(message.text.split()[1])
            ref = message.text.split()[1]
        except ValueError:
            pass

    if not check_user(user.id):
        # prompt user to select language
        language_keyboard = get_language_keyboard()
        await message.answer("Please select your language:", reply_markup=language_keyboard)
        add_user(user.id, ref)
        # if ref != 0:
        #     if ref:
        #         add_refferal_balance(ref)
        #         await bot.send_message(ref,
        #                                     f'üë§ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id={user.id}"><b>{user.first_name}</b></a> –∏ –ø–æ–ª—É—á–∏–ª–∏ <b>0.03</b> TAKE')
        #     else:
        #         print(f"Referral user with ID {ref} not found.")
    elif len(robots) == 0:
        await message.answer(translate_text(robot_chances_text(), user.id), reply_markup=get_robot_keyboard(user.id))

    elif 'joingame_' in message.text:
        game_id = message.text.split('_')[1]
        game = mdb.get_game(game_id)
        if game:
            player_id = game[3]
            if player_id != user.id:
                await join_game(user, game_id)
                return

    elif 'joinsquad_' in message.text:
        group_id = message.text.split('_')[1]
        user_id = message.from_user.id
        if add_user_to_squad(group_id, user_id):
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∫–≤–∞–¥ {group_id}!")
        else:
            await message.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ!")

    else:
        await message.answer(translate_text(get_start_text(), user.id), reply_markup=create_start_keyboard(user.id))




async def join_game(user, game_id):
    game = mdb.get_game(game_id)
    player_id = game[3]

    try:
        player = await bot.get_chat(player_id)
        player = player.first_name
        player = f'<a href="tg://user?id={player_id}">{player}</a>'
    except:
        player = f'<a href="tg://user?id={player_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

    text = f'<b>#Ô∏è‚É£ –ë–æ–π –Ω–æ–º–µ—Ä:</b> #{game[0]}\n' \
           f'<b>üíé –°—Ç–∞–≤–∫–∞:</b> {game[1]} TON\n' \
           f'üìÜ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏–µ: {game[6]}\n' \
           f'<b>üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {player}\n\n' \
           f'<i>–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –±–æ–π?</i>'

    keyboard = await join_game_key(game[0])

    await bot.send_message(
        user.id,
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.message_handler(lambda message: message.text in [translate_text("üëù –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫", message.from_user.id), "üëù Link wallet"])
@dp.throttled(antiflood, rate=1)
async def process_wallet_request(message: types.Message):

    user_id = message.from_user.id
    wallet_address = 'EQCSvwpsHiBvdS2nxIJ77Z7D-8MNqe4vGy0ZBW50WM1WJtvO'
    comment = f'TonTakeRoBot{user_id}'

    bonus_info = (
        'üöÄ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å –Ω–∞–ª–∏—á–∏–µ–º –ù–§–¢ –¢–æ–Ω–¢–µ–π–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è'
        '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞ –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É! –¢–∞–∫–∂–µ –≤–∞—à —Ä–æ–±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!'
    )

    message_text = (
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 0.01 TON —Å –∫–æ—à–µ–ª—å–∫–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–∞ –∞–¥—Ä–µ—Å '
        f'`{wallet_address}`\n\n'
        '–° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: `{}`\n\n'
        '–í–Ω–∏–º–∞–Ω–∏–µ! –ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–æ–≤–Ω–æ 0.01 TON!\n\n'
        '–ü–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂".\n\n'
        .format(comment)
    )

    message_text_with_bonus = f'{message_text}\n{bonus_info}'

    await message.answer(translate_text(message_text_with_bonus, user_id), reply_markup=nft_key(message.from_user.id), parse_mode='Markdown')


@dp.message_handler(lambda message: message.text in [translate_text("üñº NFTs", message.from_user.id), "üñº NFTs"])
@dp.throttled(antiflood, rate=1)
async def process_nft_request(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    wallet = get_user_wallet(chat_id)
    if not wallet:  # Check if wallet is None or empty
        await bot.send_message(chat_id, translate_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∫ –±–æ—Ç—É", user_id))
    else:
        check_nft = check_owner_nft(address=wallet)
        if check_nft:
            text = translate_text(f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ ({wallet}) –µ—Å—Ç—å –ù–§–¢ –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!\n\n"
                                   f"üéÅ –≠—Ç–æ –¥–∞–µ—Ç –≤–∞–º —Å–ª–µ–¥—É—é—â–∏–µ –±–æ–Ω—É—Å—ã:\n"
                                   f"- 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É –Ω–∞—à–∏—Ö —Ä–æ–±–æ—Ç–æ–≤\n"
                                   f"- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ä–æ–±–æ—Ç–∞ –≤ 2 —Ä–∞–∑–∞\n"
                                   f"- –ë–æ–Ω—É—Å +1 –∫ —Å–∏–ª–µ —É–¥–∞—Ä–∞ –≤ –±–∏—Ç–≤–∞—Ö\n\n"
                                   f"–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –∏ —É–¥–∞—á–∏ –≤ –±–æ—è—Ö! üí™üéâ", user_id)
            await bot.send_message(chat_id, text)
            current_nft_status = get_user_nft_status(chat_id)
            if current_nft_status != 1:
                set_user_nft_status(chat_id, 1)
        else:
            await bot.send_message(chat_id, translate_text(f"‚ùå –ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ ({wallet}) –Ω–µ—Ç –ù–§–¢ –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏", user_id))
            
            set_user_nft_status(chat_id, 0)



     
def check_owner_nft(address):
    try:
        ton = TonScan()
        res = ton.unpack_address(address)
        print(res)
        if res['ok']:
            address = res['result']
            for collection in NFT_COLLECTIONS:
                collection = collection.replace('https://getgems.io/collection/', '')
                collection_items = ton.collection_items(collection)
                if address in str(collection_items):
                    return True
                    break
        return False
    except Exception as e:
        print('Err422: ', e)
        return False                        


@dp.message_handler(lambda message: message.text in [translate_text("üì∏ –°–∫–≤–∞–¥—ã", message.from_user.id), "üì∏ –°–∫–≤–∞–¥—ã"])
@dp.throttled(antiflood, rate=1)
async def team(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫–≤–∞–¥—ã TonTakeRobot! ü§ñ\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–≤–∞–¥ –∏ –±–æ—Ä–æ—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ "
        "—Å–∫–∞–≤–∞–¥–∞–º–∏ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ. üèÜ\n\n"
        "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Å–∫–≤–∞–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –∑–∞–±–µ—Ä–µ—Ç –ø—Ä–∏–∑ –≤ "
        "—Ä–∞–∑–º–µ—Ä–µ 5% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –±–æ—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤ —Å–∫–≤–∞–¥–∞—Ö. üí∞\n\n"
        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∫–≤–∞–¥–∞—Ö, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π —á–∞—Ç.\n\n"
    )

    top_squads = get_top_squads(10)
    
    async def get_user_name(user_id):
        user = await bot.get_chat(user_id)
        return user.first_name

    squads_info = ""
    if top_squads:
        squads_info += "<b>–¢–æ–ø —Å–∫–≤–∞–¥–æ–≤:</b>\n\n"
        for i, (squad_id, group_name, leader_id, balance) in enumerate(top_squads, start=1):
            leader_name = await get_user_name(leader_id)
            squads_info += f"{i}. –°–∫–≤–∞–¥: {group_name}, –õ–∏–¥–µ—Ä: {leader_name}, –ë–∞–ª–∞–Ω—Å: {balance} TON\n\n"
    else:
        squads_info = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤."

    # Retrieve top 10 payment

    top_payments = get_top_payments(10)
    
    payments_info = ""
    if top_payments:
        payments_info += "<b>–¢–æ–ø –≤—ã–ø–ª–∞—Ç:</b>\n\n"
        for i, (group_id, leader_id, group_name, prize) in enumerate(top_payments, start=1):
            leader_name = await get_user_name(leader_id)
            payments_info += f"{i}. –°–∫–≤–∞–¥: {group_name}, –õ–∏–¥–µ—Ä: {leader_name}, –í—ã–ø–ª–∞—Ç–∞: {prize} TON\n\n"
    else:
        payments_info = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç."

    combined_text = welcome_text + squads_info + payments_info
    await message.answer(combined_text, parse_mode='HTML')






@dp.message_handler(IsPrivate(), lambda message: message.text in [translate_text("–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–±–æ—Ç–∞ ü§ñ", message.from_user.id), "Get robot ü§ñ"])
async def get_robot_button_handler(message: types.Message):
    user = message.from_user
    ref = 0
    robots = mdb.get_user_robots(user.id)

    if len(robots) == 0:
        robot_name = give_robot_to_user(user.id)
        await message.answer(translate_text(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–±–æ—Ç–∞ <b>{robot_name}</b> –≤ –ø–æ–¥–∞—Ä–æ–∫!", user.id))
        
    await message.answer(get_start_text(), reply_markup=create_start_keyboard(user.id))
        
@dp.message_handler(Text('üîô –ù–∞–∑–∞–¥', ignore_case=True), state='*')
async def back(msg: types.Message, state: FSMContext):
    user = msg.from_user
    await state.finish()
    await msg.answer(translate_text('üîô –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥', user.id), reply_markup=create_start_keyboard(user.id))
    await msg.delete()

@dp.message_handler(Text('üîôBack', ignore_case=True), state='*')
async def back(msg: types.Message, state: FSMContext):
    user = msg.from_user
    await state.finish()
    await msg.answer(translate_text('üîô –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥', user.id), reply_markup=create_start_keyboard(user.id))
    await msg.delete()



@dp.message_handler(lambda message: message.text in [translate_text("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", message.from_user.id), "üë• Referral system"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def refferal_system(msg: types.Message):
    user = msg.from_user
    username = await bot.get_me()
    refferals_count = get_refferals(msg.from_user.id)
    refferal_take_reward = refferals_count * 0.03

    text = (
        'üî• –ó–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ –≤–∞—à–µ–π '
        '—Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+0.03 TAKE</b> –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Ä–æ–±–æ—Ç–∞!'
        '–î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è 0.03 TAKE –æ–Ω <b>–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫.</b>'
        '\n\n'
        '<i>ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</i> <b>{}</b>\nüí∞–ü–æ–ª—É—á–µ–Ω–æ TAKE: {:.3f}\n\nüîó <i>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>'
        ' <code>t.me/{}?start={}</code>'.format(
            refferals_count,
            refferal_take_reward,
            username['username'],
            user.id)
    )

    translated_text = translate_text(text, user.id)

    await msg.answer(translated_text, parse_mode=html)

@dp.message_handler(lambda message: message.text in ["üîº –ê–ø–≥—Ä–µ–π–¥", "üîº Upgrade"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def upgrades(msg: types.Message):
    user = msg.from_user
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text=translate_text("üîã –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ", user.id), callback_data="info-max_health"),
        InlineKeyboardButton(text=translate_text("‚öîÔ∏è –ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –º–µ—á", user.id), callback_data="info-damage"),
        InlineKeyboardButton(text=translate_text("‚öôÔ∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–º–∫–æ–º–ø–ª–µ–∫—Ç", user.id), callback_data="info-heal"),
        InlineKeyboardButton(text=translate_text("üõ° –¢–∏—Ç–∞–Ω–æ–≤–∞—è –±—Ä–æ–Ω—è", user.id), callback_data="info-armor"),
    )

    robot = mdb.get_user_active_robot(user.id)
    robot_id = robot[1]
    robot_name = robot[2]
    robot_max_health = robot[8]
    robot_damage = robot[4]
    robot_heal = robot[5]
    robot_armor = robot[6]

    nft_status = check_owner_nft(user.id)
    discount_message = ""
    if nft_status:
        discount_message = "\n<i>üè∑Ô∏è –í—ã –∏–º–µ–µ—Ç–µ 10% —Å–∫–∏–¥–∫—É –Ω–∞ –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–µ–º—É –ù–§–¢!</i>"

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await msg.answer_photo(
            photo,
            f"ü§ñ {translate_text('–†–æ–±–æ—Ç', user.id)}: <b>{robot_name}</b>\n\n"
            f"<b>{translate_text('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ', user.id)}</b>\n\n"
            f"{translate_text('–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', user.id)}:\n"
            f"üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', user.id)}: <b>{robot_max_health}</b>\n"
            f"‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', user.id)}: <b>{robot_damage}</b>\n"
            f"‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', user.id)}: <b>{robot_heal}</b>\n"
            f"üõ° {translate_text('–ë—Ä–æ–Ω—è', user.id)}: <b>{robot_armor}</b>\n"
            f"{discount_message}",
            reply_markup=kb,
            parse_mode="HTML"
        )




@dp.message_handler(lambda message: message.text in [translate_text("ü§ñ –ú–æ–∏ —Ä–æ–±–æ—Ç—ã", message.from_user.id), "ü§ñ My robots"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def getrobot(msg: types.Message):
    user = msg.from_user
    robots = mdb.get_user_robots(user.id)

    if len(robots) == 0:
        await msg.answer(translate_text('üôÅ –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–±–æ—Ç–æ–≤, –∫—É–ø–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"üõí –ú–∞–≥–∞–∑–∏–Ω"</b>', user.id))
        return

    robot = robots[0]
    robot_id = robot[1]
    robot_name = robot[2]
    robot_health = robot[3]
    robot_damage = robot[4]
    robot_heal = robot[5]
    robot_armor = robot[6]
    status = robot[7]
    robot_lvl = robot[9]
    robot_max_health = robot[8]

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await msg.answer_photo(photo, f'''
ü§ñ {translate_text('–†–æ–±–æ—Ç', user.id)}: <b>{robot_name}</b>
üÜî ID: <b>{robot_id}</b>

üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', user.id)}: <b>{robot_max_health}</b>
‚ö°Ô∏è {translate_text('–ó–¥–æ—Ä–æ–≤—å–µ', user.id)}: <b>{robot_health}</b>
‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', user.id)}: <b>{robot_damage}</b>
‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', user.id)}: <b>{robot_heal}</b>
üéö  {translate_text('–£—Ä–æ–≤–µ–Ω—å —Ä–æ–±–æ—Ç–∞', user.id)}: <b>{robot_lvl}</b> 
üõ° {translate_text('–ë—Ä–æ–Ω—è', user.id)}: <b>{robot_armor}</b>''', reply_markup=await my_robots_key(0, robot_id, len(robots), status, user.id))

@dp.message_handler(lambda message: message.text in [translate_text("üíé –ë–∞–ª–∞–Ω—Å", message.from_user.id), "üíé Balance"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def getbalance(msg: types.Message, state: FSMContext):
    await state.finish()
    uid = msg.from_user.id
    user_balance = round(get_balance(uid), 5)
    take_balance = round(get_take_balance(uid), 5)

    await msg.answer(f'''üÜî {translate_text('–í–∞—à ID', uid)}: <code>{uid}</code>

<b>üíé TON:</b> {user_balance}
<b>üí∞ TAKE</b> {take_balance}''', reply_markup=deposit_key, parse_mode=html)



@dp.message_handler(lambda message: message.text in [translate_text("üèÜ –¢—É—Ä–Ω–∏—Ä", message.from_user.id), "üèÜ Tournament"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def tournament(msg: types.Message, state: FSMContext):
    await state.finish()
    uid = msg.from_user.id
    active_tour = get_active_tour()
    if active_tour is not None:
        active_tour = get_tour(active_tour[0])
        user_exist = get_tour_user_exist(uid, active_tour[0])
        if not user_exist:
            user_status = translate_text('üö´ –°—Ç–∞—Ç—Éc: <b>–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ</b>', user_id=uid)
            user_place = translate_text('–Ω–µ—Ç –º–µ—Å—Ç–∞', user_id=uid)
        else:
            user_status = translate_text('‚úÖ –°—Ç–∞—Ç—Éc: <b>–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ</b>', user_id=uid)
            user_place = get_user_place(active_tour[0], uid)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text=translate_text('‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', user_id=uid), callback_data='tour-run_' + str(active_tour[0])))
        markup.add(InlineKeyboardButton(text=translate_text('üìÅ –ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', user_id=uid), callback_data='tour_history'))

        top_users = get_tour_top_user(active_tour[0])
        count_users = get_count_tour_users(active_tour[0])
        if not count_users:
            top_users_text = translate_text('–Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', user_id=uid)
        else:
            top_users_text = ''
            for i, user in enumerate(top_users, start=1):
                top_users_text += f'{i}. üë§ <a href="tg://user?id={user[0]}">{translate_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user_id=uid)}</a> (<code>{user[0]}</code>): <b>{user[1]}</b> {translate_text("–æ—á–∫–æ–≤", user_id=uid)}\n'

        user_ball = get_user_tour_ball(active_tour[0], uid)
        await msg.answer(f'''<b>üèÜ {translate_text("–¢—É—Ä–Ω–∏—Ä", user_id=uid)} <b>‚Ññ{active_tour[0]}</b></b>

{user_status}
            
üïû {translate_text("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)} - <b>{active_tour[2]}:00 –ø–æ MSK</b>
üïî {translate_text("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)} - <b>{active_tour[3]}:00 –ø–æ MSK</b>

‚≠êÔ∏è {translate_text("–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", user_id=uid)}: <b>{count_users}</b>
üîù {translate_text("–õ–∏–¥–µ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)}: ‚§µÔ∏è
{top_users_text}
üíé {translate_text("–¶–µ–Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä", user_id=uid)}: <b>0.1</b> TON
üíµ {translate_text("–§–æ–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)}: <b>{round(count_users * 0.09, 2)}</b> TON

ü´µ {translate_text("–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ", user_id=uid)}: <b>{user_place}</b>
‚ö°Ô∏è {translate_text("–£ –≤–∞—Å –æ—á–∫–æ–≤", user_id=uid)}: <b>{user_ball}</b>

üèÜ{translate_text("–í —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–±–µ–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–Ω—ã—Ö –±–æ–µ–≤ –≤ ", user_id=uid)}"üë• {translate_text("–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä–µ", user_id=uid)}" <b>({translate_text("–∏–≥—Ä—ã —Å–æ —Å—Ç–∞–≤–∫–æ–π 0 TON –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è", user_id=uid)})</b>. 
‚≠êÔ∏è{translate_text("–ö–∞–∂–¥–∞—è –ø–æ–±–µ–¥–∞ –≤–∞–º –ø—Ä–∏–Ω–æ—Å–∏—Ç 1 –æ—á–∫–æ.", user_id=uid)}''',
                         reply_markup=markup, parse_mode=html)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text=translate_text('üìÅ –ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', user_id=uid), callback_data='tour_history'))
        await msg.answer(f'''<b>‚≠ïÔ∏è {translate_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π!", user_id=uid)}</b>''',
                         reply_markup=markup, parse_mode=html)


@dp.message_handler(lambda message: message.text in [translate_text("üõí –ú–∞–≥–∞–∑–∏–Ω", message.from_user.id), "üõí Shop"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def market(message: types.Message):
    user = message.from_user
    robots = mdb.get_robots()
    count_robots = len(robots)
    if count_robots == 0:
        await message.answer(translate_text('–ù–µ—Ç —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ!', message.from_user.id))
        return

    robot = robots[0]

    robot_id = robot[0]
    robot_name = robot[1]
    robot_health = robot[2]
    robot_damage = robot[3]
    robot_heal = robot[4]
    robot_armor = robot[5]
    robot_price = robot[6]

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await message.answer_photo(photo, f'''
ü§ñ {translate_text('–†–æ–±–æ—Ç', message.from_user.id)}: <b>{robot_name}</b>
üÜî 'ID': <b>{robot_id}</b>

üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', message.from_user.id)}: <b>{robot_health}</b>
‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', message.from_user.id)}: <b>{robot_damage}</b>
‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', message.from_user.id)}: <b>{robot_heal}</b>
üõ° {translate_text('–ë—Ä–æ–Ω—è', message.from_user.id)}: <b>{robot_armor}</b>

üíé <b>{translate_text('–°—Ç–æ–∏–º–æ—Å—Ç—å', message.from_user.id)} {robot_price} –¢–ê–ö–ï</b>''', reply_markup=await market_key(robot_id,
                                                                                                                    robots.index(robot) + 1,
                                                                                                                    robots.index(robot) - 1,
                                                                                                                    count_robots,
                                                                                                                    robots.index(robot),
                                                                                                                    user.id
                                                                                                                    )
                                                                                                   )
                               


@dp.message_handler(lambda message: message.text in [translate_text("üîù –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", message.from_user.id), "üîù Top players"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def get_top(msg: types.Message):
    top_lvl = new_top_lvl()
    top_bet = new_top_bet_games()
    top_refferals = get_top_refferals()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

    text = 'üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n'

    text += '<b>–ü–æ —É—Ä–æ–≤–Ω—é —Ä–æ–±–æ—Ç–∞:</b>\n'
    for i, user in enumerate(top_lvl):
        user_id = user[0]
        user_lvl = user[9]  # –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å 9 –Ω–∞ 3
        user_robot = user[2]
        try:
            player_name = await bot.get_chat(user_id)
            player_name = player_name.first_name
            player_name = f'<a href="tg://user?id={user_id}">{player_name}</a>'
        except:
            player_name = f'<a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

        text += f'{hbold(i + 1)}. {player_name} - {user_lvl} - {user_robot}\n'

    text += '\n<b>–ü–æ –ø–ª–∞—Ç–Ω—ã–º –±–æ—è–º:</b>\n'
    for i, user in enumerate(top_bet):
        user_id = user[0]
        user_bet = round(user[1], 3)
        try:
            player_name = await bot.get_chat(user_id)
            player_name = player_name.first_name
            player_name = f'<a href="tg://user?id={user_id}">{player_name}</a>'
        except:
            player_name = f'<a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

        text += f'{hbold(i + 1)}. {player_name} - {user_bet:.2f}\n'

    text += '\n<b>–ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:</b>\n'
    for i, refferal in enumerate(top_refferals):
        refferal_id = refferal[0]
        refferal_count = refferal[1]
        try:
            refferal_name = await bot.get_chat(refferal_id)
            refferal_name = refferal_name.first_name
            refferal_name = f'<a href="tg://user?id={refferal_id}">{refferal_name}</a>'
        except:
            refferal_name = f'<a href="tg://user?id={refferal_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

        text += f'{hbold(i + 1)}. {refferal_name} - {refferal_count}\n'

    # –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    user_lang = check_user_language(msg.from_user.id)
    if user_lang == 'en':
        text = text.replace('–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:', 'Top players:')
        text = text.replace('–ü–æ —É—Ä–æ–≤–Ω—é —Ä–æ–±–æ—Ç–∞:', 'By robot level:')
        text = text.replace('–ü–æ –ø–ª–∞—Ç–Ω—ã–º –±–æ—è–º:', 'Paid battles:')
        text = text.replace('–ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:', 'Referrals:')
        text = text.replace('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User')
    elif user_lang == 'ru':
        pass  # —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    else:
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä—É—Å—Å–∫–∏–π)
        pass

    await msg.answer(text, parse_mode='HTML')



@dp.message_handler(lambda message: message.text in [translate_text("üéÆ –ò–≥—Ä–∞—Ç—å", message.from_user.id), "üéÆ Play"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def game_match(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton(translate_text("‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –±–æ–π", user_id)), KeyboardButton(translate_text("ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é", user_id)))
    keyboard.row(KeyboardButton(translate_text("üõ°Ô∏è –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏", user_id)), KeyboardButton(translate_text("üìú –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –±–æ–µ–≤", user_id)))

    keyboard.row(KeyboardButton(translate_text("üîô –ù–∞–∑–∞–¥", user_id)))
    await message.answer(translate_text('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫', user_id),
                         reply_markup=keyboard,
                         )


@dp.message_handler(text='‚öîÔ∏è Create a battle')
@dp.throttled(antiflood, rate=1)
async def create_game_0(message: types.Message):
    user_id = message.from_user.id
    await message.answer(translate_text('<b>üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –Ω–∞ –±–æ–π:</b>', user_id), reply_markup=bet_key)


@dp.message_handler(text='ü§ù Join the fight')
@dp.throttled(antiflood, rate=1)
async def join_to_game(message: types.Message):
    active_games = mdb.get_active_games()
    user_id = message.from_user.id
    if len(active_games) == 0:
        await message.answer(translate_text('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π" –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.'''), user_id)
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'join_{game[0]}'))

    await message.answer(translate_text('<b>‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', user_id), reply_markup=markup)


@dp.message_handler(text='üõ°Ô∏è My active battles')
@dp.throttled(antiflood, rate=1)
async def my_active_games(message: types.Message):
    user = message.from_user
    active_games = mdb.get_user_active_games(user.id)
    if len(active_games) == 0:
        await message.answer(translate_text('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π".'''), user.id)
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'mygame_{game[0]}'))

    await message.answer(translate_text('<b>‚öîÔ∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', user.id), reply_markup=markup)


@dp.message_handler(text='üìú History of my fights')
@dp.throttled(antiflood, rate=1)
async def game_history(message: types.Message):
    user = message.from_user
    history = mdb.get_user_all_games(user.id)
    if len(history) == 0:
        await message.answer(translate_text('''<b>‚ùå –í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –±–æ—è—Ö.</b>'''), user.id)
        return

    text = f'üìÅ History of battles of a player with ID {user.id}\n\n'
    for game in history:
        if game[5] == 0:
            winner = 'The battle has not yet started, is not finished, or has been deleted!'
        else:
            winner = game[5]

        if game[2] == 'finished':
            status = 'ENDED'
        elif game[2] == 'started':
            status = 'STARTED'
        elif game[2] == 'expectation':
            status = 'WAITING'
        else:
            status = 'DELETED'

        try:
            player1 = await bot.get_chat(game[3])
            player1 = player1.first_name

            player2 = await bot.get_chat(game[4])
            player2 = player2.first_name
        except:
            player1 = f'User'
            player2 = f'User'

        text += f'''‚öîÔ∏è –ë–æ–π –Ω–æ–º–µ—Ä #{game[0]}
üë§ Player 1: {player1} ({game[3]})
üë§ Player 2: {player2} ({game[4]})
üìå Status: {status}
üíé Bet: {game[1]} TON
üìÜ Date: {game[6]}
üëë Winner: {winner}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
'''

    with open(f'data/texts/{user.id}-history.txt', 'w', encoding='UTF-8') as file:
        file.write(text)

    input_file = InputFile(f'data/texts/{user.id}-history.txt', filename=f'{user.id}-history.txt')
    await message.answer_document(input_file, caption='Your battles history.')

    os.remove(f'data/texts/{user.id}-history.txt')


@dp.message_handler(text='‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –±–æ–π')
@dp.throttled(antiflood, rate=1)
async def create_game_0(message: types.Message):
    await message.answer('<b>üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –Ω–∞ –±–æ–π:</b>', reply_markup=bet_key)


@dp.message_handler(text='ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é')
@dp.throttled(antiflood, rate=1)
async def join_to_game(message: types.Message):
    active_games = mdb.get_active_games()
    if len(active_games) == 0:
        await message.answer('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π" –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.''')
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'join_{game[0]}'))

    await message.answer('<b>‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', reply_markup=markup)


@dp.message_handler(text='üõ°Ô∏è –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏')
@dp.throttled(antiflood, rate=1)
async def my_active_games(message: types.Message):
    user = message.from_user
    active_games = mdb.get_user_active_games(user.id)
    if len(active_games) == 0:
        await message.answer('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π".''')
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'mygame_{game[0]}'))

    await message.answer('<b>‚öîÔ∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', reply_markup=markup)


@dp.message_handler(text='üìú –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –±–æ–µ–≤')
@dp.throttled(antiflood, rate=1)
async def game_history(message: types.Message):
    user = message.from_user
    history = mdb.get_user_all_games(user.id)
    if len(history) == 0:
        await message.answer('''<b>‚ùå –í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –±–æ—è—Ö.</b>''')
        return

    text = f'üìÅ –ò—Å—Ç–æ—Ä–∏—è –±–æ–µ–≤ –∏–≥—Ä–æ–∫–∞ —Å ID {user.id}\n\n'
    for game in history:
        if game[5] == 0:
            winner = '–ë–æ–π –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç –∏–ª–∏ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω!'
        else:
            winner = game[5]

        if game[2] == 'finished':
            status = '–ë–û–ô –ó–ê–ö–û–ù–ß–ï–ù'
        elif game[2] == 'started':
            status = '–ë–û–ô –ù–ê–ß–ê–¢'
        elif game[2] == 'expectation':
            status = '–í –û–ñ–ò–î–ê–ù–ò–ò'
        else:
            status = '–ë–û–ô –£–î–ê–õ–ï–ù'

        try:
            player1 = await bot.get_chat(game[3])
            player1 = player1.first_name

            player2 = await bot.get_chat(game[4])
            player2 = player2.first_name
        except:
            player1 = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            player2 = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

        text += f'''‚öîÔ∏è –ë–æ–π –Ω–æ–º–µ—Ä #{game[0]}
üë§ –ò–≥—Ä–æ–∫ 1: {player1} ({game[3]})
üë§ –ò–≥—Ä–æ–∫ 2: {player2} ({game[4]})
üìå –°—Ç–∞—Ç—É—Å: {status}
üíé –°—Ç–∞–≤–∫–∞: {game[1]} TON
üìÜ –î–∞—Ç–∞ –∏–≥—Ä—ã: {game[6]}
üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
'''

    with open(f'data/texts/{user.id}-history.txt', 'w', encoding='UTF-8') as file:
        file.write(text)

    input_file = InputFile(f'data/texts/{user.id}-history.txt', filename=f'{user.id}-history.txt')
    await message.answer_document(input_file, caption='–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –±–æ–µ–≤.')

    os.remove(f'data/texts/{user.id}-history.txt')
    
@dp.message_handler(state=WithdrawTon.amount)
@dp.throttled(antiflood, rate=1)
async def process_sum(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    valid = False
    try:
        float(message.text)
        valid = True
    except ValueError:
        pass
    if valid and 0 < float(message.text) <= get_balance(user_id):
        amount = round(float(message.text), 6)
        if amount < 0.1:
            text = 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 0.1 TON!'
            await message.answer(translate_text(text, user_id))
            return
        text = f'<i>üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥</i>\n\nüíé –°—É–º–º–∞: <b>{amount}</b> TON'
        await message.answer(translate_text(text, user_id), reply_markup=await withdraw_key(amount))
        await state.finish()
    elif valid and float(message.text) > get_balance(user_id):
        text = "***–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤...***"
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()
    else:
        text = "***–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..."
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()



@dp.message_handler(state=WithdrawTake.amount)
@dp.throttled(antiflood, rate=1)
async def process_sum_take(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    valid = False
    try:
        float(message.text)
        valid = True
    except ValueError:
        pass
    if valid and 0 < float(message.text) <= get_take_balance(user_id):
        amount = round(float(message.text), 6)
        if amount < 0.1:
            text = 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 0.1 TAKE!'
            await message.answer(translate_text(text, user_id))
            return
        text = f'üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥\n\nüíé –°—É–º–º–∞: <b>{amount}</b> TAKE'
        await message.answer(translate_text(text, user_id), reply_markup=await withdraw_key_take(amount))
        await state.finish()
    elif valid and float(message.text) > get_take_balance(user_id):
        text = "***–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤...***"
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()
    else:
        text = "***–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..."
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()


@dp.message_handler(state=DepositTon.amount)
async def deposit_ton_2(message: types.Message, state: FSMContext):
    user = message.from_user
    user_id = message.from_user.id
    try:
        amount = float(message.text)
    except ValueError:
        text = '<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>'
        await message.answer(translate_text(text, user_id), reply_markup=back_key, parse_mode=html)
        return

    invoice_id, invoice_link = await create_invoice(amount, user.id, 'TONCOIN')

    if invoice_id is None:
        text = '<b>üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞, —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>'
        await message.answer(translate_text(text, user_id), parse_mode=html)
        await bot.send_message(1251379793, f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —É —é–∑–µ—Ä–∞ {user.id}\n–¢–µ–∫—Å—Ç: {invoice_link}',
                               parse_mode=html)
        await state.finish()
        return

    await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞...', reply_markup=create_start_keyboard(user.id))

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text=translate_text('üîó –û–ø–ª–∞—Ç–∏—Ç—å', user_id), url=invoice_link))
    markup.add(InlineKeyboardButton(text=translate_text('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', user_id), callback_data='check-ton_' + str(invoice_id)))

    text = '''<b>üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é TON:</b>

‚ùóÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚ùó

üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"üîó –û–ø–ª–∞—Ç–∏—Ç—å"</b> —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>!'''
    await message.answer(translate_text(text, user_id), reply_markup=markup, parse_mode=html)
    await state.finish()



@dp.message_handler(state=DepositTake.amount)
async def deposit_take_2(message: types.Message, state: FSMContext):
    user = message.from_user
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer(translate_text('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>', user.id), reply_markup=back_key, parse_mode=html)
        return

    invoice_id, invoice_link = await create_invoice(amount, user.id, 'TAKE')

    if invoice_id is None:
        await message.answer(translate_text('<b>üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞, —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>', user.id),
                             parse_mode=html)
        await bot.send_message(1251379793, f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —É —é–∑–µ—Ä–∞ {user.id}\n–¢–µ–∫—Å—Ç: {invoice_link}',
                               parse_mode=html)
        await state.finish()
        return

    await message.answer(translate_text('–û–±—Ä–∞–±–æ—Ç–∫–∞...', user.id), reply_markup=create_start_keyboard(user.id))

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='üîó –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice_link))
    markup.add(InlineKeyboardButton(text='‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='check-take_' + str(invoice_id)))
    await message.answer(f'''<b>üíé {translate_text('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é TAKE:', user.id)}</b>

‚ùóÔ∏è {translate_text('–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂', user.id)} ‚ùó

üëá {translate_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"üîó –û–ø–ª–∞—Ç–∏—Ç—å"</b> —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>!', user.id)}''',
                         reply_markup=markup, parse_mode=html)
    await state.finish()

@dp.message_handler(state=DepositCry.amount)
async def receive_amount_in_ton(message: types.Message, state: FSMContext):
    user = message.from_user
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer(translate_text('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>', user.id))
        return

    await message.answer(translate_text('–û–±—Ä–∞–±–æ—Ç–∫–∞...', user.id), reply_markup=create_start_keyboard(user.id))
    invoice_id, invoice_url = await create_cry_invoice(amount, 'TON', user.id)

    if invoice_id == 'small':
        await message.answer(translate_text('<b>üö´ –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è!</b>', user.id))
        return

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='üîó –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice_url))
    markup.add(
        InlineKeyboardButton(text='‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='check-cry_' + str(invoice_id)))
    await message.answer(f'''<b>üíé {translate_text('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é TON:', user.id)}</b>

‚ùóÔ∏è {translate_text('–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂', user.id)} ‚ùó

üëá {translate_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"üîó –û–ø–ª–∞—Ç–∏—Ç—å"</b> —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>!', user.id)}''',
                         reply_markup=markup)
    await state.finish()


@dp.message_handler(lambda message: message.text in [translate_text("üè™ –†—ã–Ω–æ–∫", message.from_user.id), "üè™ Market"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def bazar(message: types.Message):
    robots = mdb.get_bazar_robots()
    user_id = message.from_user.id
    count_robots = len(robots)
    if count_robots == 0:
        await message.answer(translate_text('–ù–µ—Ç —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ!', message.from_user.id))
        return

    robot = robots[0]

    robot_seller = robot[0]
    robot_id = robot[2]
    robot_name = robot[3]
    robot_health = robot[4]
    robot_damage = robot[5]
    robot_heal = robot[6]
    robot_armor = robot[7]
    robot_price = robot[10]
    robot_lvl = robot[8]

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await message.answer_photo(photo, f'''
ü§ñ {translate_text('–†–æ–±–æ—Ç', message.from_user.id)}: <b>{robot_name}</b>
üë§ {translate_text('–ü—Ä–æ–¥–∞–≤–µ—Ü', message.from_user.id)}: <b>{robot_seller}</b>
üÜî 'ID': <b>{robot_id}</b>

üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', message.from_user.id)}: <b>{robot_health}</b>
‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', message.from_user.id)}: <b>{robot_damage}</b>
‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', message.from_user.id)}: <b>{robot_heal}</b>
üéö  {translate_text('–£—Ä–æ–≤–µ–Ω—å —Ä–æ–±–æ—Ç–∞', message.from_user.id)}: <b>{robot_lvl}</b> 
üõ°  {translate_text('–ë—Ä–æ–Ω—è', message.from_user.id)}: <b>{robot_armor}</b>

üíé <b>{translate_text('–°—Ç–æ–∏–º–æ—Å—Ç—å', message.from_user.id)} {robot_price} –¢–ê–ö–ï</b>''', reply_markup=await bazar_key(robot_id,
                                                                                                                  robots.index(robot) + 1,
                                                                                                                  robots.index(robot) - 1,
                                                                                                                  count_robots,
                                                                                                                  robots.index(robot),
                                                                                                                  robot_seller,
                                                                                                                  user_id  
                                                                                                                  )
                                               )
                               




@dp.message_handler(lambda message: message.text in [translate_text("üè≠ –õ–æ–∫–∞—Ü–∏–∏", message.from_user.id), "üè≠ Locations"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def locations(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    keyboard = await locations_key(user_id)
    text = translate_text('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:', user_id)
    await message.answer(text, reply_markup=keyboard)

    
@dp.message_handler(lambda message: message.text in [translate_text("üïπ –ò–≥—Ä—ã –¢–ê–ö–ï", message.from_user.id), "üïπ TAKE Games"])
@dp.throttled(antiflood, rate=1)
async def games_tontake(message: types.Message):
    user_id = message.from_user.id
    language = check_user_language(user_id)

    if language == 'ru':
        button1 = InlineKeyboardButton("–ö–ª–∏–∫–µ—Ä –∑–µ—Ä–Ω–æ—Å–∫–ª–∞–¥", url="https://zernosklad.com/")
        button2 = InlineKeyboardButton("–°—Ç—Ä–∞—Ç–µ–≥–∏—è TONvsTAKE", url="https://tontake.com/")
        text = "–ó–¥–µ—Å—å –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–µ –º–æ–Ω–µ—Ç—ã! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    elif language == 'en':
        button1 = InlineKeyboardButton("Grain storage clicker", url="https://zernosklad.com/")
        button2 = InlineKeyboardButton("TONvsTAKE strategy", url="https://tontake.com/")
        text = "Here you can also play and earn take coins! Choose a game:"

    markup = InlineKeyboardMarkup(row_width=1).add(button1, button2)

    await message.answer(text, reply_markup=markup)

    
    
    
    
    
    
    
    
@dp.message_handler(Command(['a', 'admin']))
async def admin(message: Message):
    if message.from_user.id in administrators:
        take_balance = await get_all_balance('TAKE')
        ton_balance = await get_all_balance()
        # cry_ton_balance = await get_cry_balance('ton')
        await message.answer(
            f'–ê–¥–º–∏–Ω–∫–∞:\n\n–ë–∞–ª–∞–Ω—Å TAKE: <b>{take_balance}</b>\n–ë–∞–ª–∞–Ω—Å TON: <b>{ton_balance}</b>',
            reply_markup=admin_key,
            parse_mode=html
        )
    else:
        await message.answer("You don't have permission to access the admin panel.")


# @dp.message_handler(IsAdmin(), Command(['restore_robot']))
# async def restore_robots(message: Message):
#     robots = get_all_user_robots()
#     counter = 0
#     for robot in robots:
#         counter += 1
#         user_id = robot[0]
#         health = robot[1]
#         damage = robot[2]
#         heal = robot[3]
#         armor = robot[4]
#         lvl = robot[5]
#         mdb.add_robot(user_id, 999, "–¢–∏—Ç–∞–Ω", health, damage, heal, armor, lvl)
#         mdb.update_robot_status(user_id, 999)
#
#     await message.answer(f'–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–æ {counter} —Ä–æ–±–æ—Ç–æ–≤.')


@dp.message_handler(state=SendAllText.text)
async def send_to_users(message: Message, state: FSMContext):
    user.id = message.from_user.id
    users = get_users()
    bad_result = 0
    good_result = 0
    async with state.proxy() as data:
        data["text"] = message.text

    async with state.proxy() as data:
        text = data["text"]
    start_time = time.time()
    await state.finish()
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
    for user in users:
        for x in user:
            try:
                await bot.send_message(x, text, reply_markup=create_start_keyboard(user.id), parse_mode=html)
                await asyncio.sleep(0.05)
                good_result += 1
            except:
                bad_result += 1
    end_time = time.time()
    await message.answer(
        f"""<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–ó–∞–Ω—è–ª–æ –≤—Ä–µ–º—è: <code>{round(end_time - start_time, 2)}</code> —Å–µ–∫—É–Ω–¥
–£—Å–ø–µ—à–Ω–æ: <code>{good_result}</code>
–ù–µ—É—Å–ø–µ—à–Ω–æ: <code>{bad_result}</code>""",
        parse_mode=html
    )


# –†–∞—Å—Å—ã–ª–∫–∞ c —Ñ–æ—Ç–æ
@dp.message_handler(content_types="photo", state=SendAllPhoto.photo)
async def send_to_users_photo(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.photo[0].file_id
    await bot.send_message(
        message.from_user.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_adm_key,
    )
    await SendAllPhoto.next()


@dp.message_handler(state=SendAllPhoto.text)
async def send_to_users_text(message: Message, state: FSMContext):
    users = get_users()
    bad_result = 0
    good_result = 0
    async with state.proxy() as data:
        data["text"] = message.text

    async with state.proxy() as data:
        text = data["text"]
        photo_id = data["photo"]
    start_time = time.time()
    await state.finish()
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
    for user in users:
        for x in user:
            try:
                await bot.send_photo(x, photo_id, text, reply_markup=create_start_keyboard(user.id), parse_mode=html)
                await asyncio.sleep(0.05)
                good_result += 1
            except:
                bad_result += 1

    end_time = time.time()
    await message.answer(
        f"""<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
–ó–∞–Ω—è–ª–æ –≤—Ä–µ–º—è:{end_time - start_time}
–£—Å–ø–µ—à–Ω–æ: {good_result}
–ù–µ—É—Å–ø–µ—à–Ω–æ: {bad_result}</b>""",
        parse_mode=html
    )


@dp.message_handler(state=StartTour.date)
async def start_tour_2(message: Message, state: FSMContext):
    end_date = message.text
    if ':' in end_date:
        end_date = end_date.split(':')[0]
    print(end_date)
    utc_now = datetime.datetime.now(pytz.utc)
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = utc_now.astimezone(moscow_tz)
    moscow_now = datetime.datetime.strftime(moscow_time, '%d.%m.%y %H')
    count_tour = get_count_exist_tour()
    add_tour(count_tour, moscow_now, end_date)

    await message.answer(f'‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <b>‚Ññ{count_tour}</b>', parse_mode=html)
    await state.finish()


@dp.message_handler(state=SearchUser.id)
async def user_search(message: Message, state: FSMContext):
    user_id = message.text

    if not check_user(user_id):
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!")
        return

    ref_count = get_refferals(user_id)
    ton_balance = round(get_balance(user_id), 4)
    take_balance = round(get_take_balance(user_id), 4)

    await message.answer(
        f"""
üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <a href="tg://user?id={user_id}"><b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b></a>

üÜî ID: <b>{user_id}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –ë–∞–ª–∞–Ω—Å TAKE: <b>{take_balance}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíé –ë–∞–ª–∞–Ω—Å TON: <b>{ton_balance}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{ref_count}</b>""",
        reply_markup=await admin_search_key(user_id),
        parse_mode=html
    )
    await state.finish()


@dp.message_handler(state=EditUserBalance.value)
async def edit_4(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    currency = data['currency']
    edit_type = data['edit_type']
    try:
        value = round(float(message.text), 4)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=cancel_adm_key)
        return
    if edit_type == 'give' and currency == 'balance':
        add_take_balance(user_id, value)
    elif edit_type == 'give' and currency == 'ton_balance':
        add_balance(user_id, value)
    elif edit_type == 'take' and currency == 'balance':
        decrease_take_balance(user_id, value)
    elif edit_type == 'take' and currency == 'ton_balance':
        decrease_balance(user_id, value)
    await message.answer(f'<b>–£—Å–ø–µ—à–Ω–æ</b>')
    await state.finish()


@dp.message_handler(state=NewRobot.name)
async def new_robot_1(message: Message, state: FSMContext):
    name = message.text
    async with state.proxy() as data:
        data['name'] = name

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.health.set()


@dp.message_handler(state=NewRobot.health)
async def new_robot_2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['health'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.damage.set()


@dp.message_handler(state=NewRobot.damage)
async def new_robot_3(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['damage'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.heal.set()


@dp.message_handler(state=NewRobot.heal)
async def new_robot_4(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['heal'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±—Ä–æ–Ω—é –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.armor.set()


@dp.message_handler(state=NewRobot.armor)
async def new_robot_5(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['armor'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Ä–æ–±–æ—Ç–∞ –≤ TAKE:</b>', reply_markup=cancel_adm_key)
    await NewRobot.price.set()


@dp.message_handler(state=NewRobot.price)
async def new_robot_6(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—Ç—å–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.photo.set()


@dp.message_handler(state=NewRobot.photo, content_types=ContentTypes.PHOTO)
async def new_robot_7(message: Message, state: FSMContext):
    photo = message.photo[-1]

    photo_id = photo.file_id

    async with state.proxy() as data:
        data['photo'] = photo_id

    robot_data = await state.get_data()
    await message.answer_photo(photo_id, f'''
–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{robot_data['name']}</b>

–ó–¥–æ—Ä–æ–≤—å–µ: <b>{robot_data['health']}</b>
–£—Ä–æ–Ω: <b>{robot_data['damage']}</b>
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>{robot_data['heal']}</b>
–ë—Ä–æ–Ω—è: <b>{robot_data['armor']}</b>

–°—Ç–æ–∏–º–æ—Å—Ç—å <b>{robot_data['price']}</b> –¢–ê–ö–ï

<b>üëá –ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–±–æ—Ç–∞:</b>
''', reply_markup=confirm_new_robot)
    await NewRobot.confirm.set()


@dp.message_handler(state=NewRobot.confirm)
async def new_robot_8(message: Message):
    await message.answer('<b>üëÜ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ üëá</b>', reply_markup=cancel_adm_key)


@dp.message_handler(state=DeleteRobot.robot_id)
async def del_robot_2(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('ID —Ä–æ–±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=cancel_adm_key)
        return

    robot_id = message.text

    await state.update_data(robot_id=robot_id)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='confirm-delete-robot'))
    markup.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_admin'))

    await message.answer(f'‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–±–æ—Ç —Å ID {robot_id}?', reply_markup=markup)

    await DeleteRobot.confirm.set()


@dp.message_handler(state=DeleteRobot.confirm)
async def delete_confirm(message: Message):
    await message.answer('<b>üëÜ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ üëá</b>', reply_markup=cancel_adm_key)
    
    

from data.functions.db_squads import get_squads_count

@dp.message_handler(lambda message: message.text in [translate_text("‚≠êÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", message.from_user.id), "‚≠êÔ∏è Statistic"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def super_statistic(message: types.Message):
    # Calculate the number of months and days since September 27, 2023
    start_date = datetime.datetime(2023, 9, 27)

    today = datetime.datetime.today()
    diff = today - start_date
    months = diff.days // 30
    days = diff.days % 30

    # Get the number of users, battles, robots, and squads from the database
    user_count = get_user_count()
    battle_count = get_battle_count()
    robots_count = get_robots_count()
    squads_count = get_squads_count()

    # Translate the text using the user's selected language
    text = (
        f"<b>ü§ñ –ë–æ—Ç—É: {months} –º–µ—Å—è—Ü–µ–≤ {days} –¥–Ω–µ–π! üìÖ</b>\n\n"
        f"<b>–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è:</b>\n"
        f"{hbold('üë• –ù–∞—Å —É–∂–µ')} {user_count} {hbold('—á–µ–ª–æ–≤–µ–∫!')}\n"
        f"{hbold('ü§ú –ú—ã –ø—Ä–æ–≤–µ–ª–∏')} {battle_count} {hbold('–±–∏—Ç–≤!')}\n"
        f"{hbold('ü§ñ –í –∏–≥—Ä–µ —É–∂–µ')} {robots_count} {hbold('—Ä–æ–±–æ—Ç–æ–≤!')}\n"
        f"{hbold('üèÜ –í –∏–≥—Ä–µ —É–∂–µ')} {squads_count} {hbold('—Å–∫–∞–≤–∞–¥–æ–≤!')}\n"
    )
    translated_text = translate_text(text, message.from_user.id)

    # Send the statistics as a message with smileys and HTML tags
    await message.answer(
        translated_text,
        parse_mode="HTML",
    )

async def on_shutdown(dp):
    await storage.close()
    await bot.close()
    me = await bot.get_me()
    print(f'Bot: @{me.username}\n–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


@dp.message_handler(commands=['getid'])
async def get_id(msg: types.Message):
    await msg.answer(f'<code>{msg.chat.id}</code>')



@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def on_bot_added(message: types.Message):
    for new_member in message.new_chat_members:
        if new_member.id == (await bot.me).id:

            group_name = message.chat.title
            
            print(group_name)

            link = f'https://t.me/TonTakeRoBot?start=joinsquad_{message.chat.id}'
            inline_btn = InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–∫–≤–∞–¥—É", url=f'{link}')
            inline_kb = InlineKeyboardMarkup().add(inline_btn)

            welcome_text = (
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫–≤–∞–¥—ã TonTakeRobot! ü§ñ\n\n"
                f"–ó–¥–µ—Å—å —Ç—ã –º–º–æ–∂–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ {group_name} —Å–∫–≤–∞–¥ –∏ –±–æ—Ä–æ—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ "
                "—Å–∫–∞–≤–∞–¥–∞–º–∏ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ. üèÜ\n\n"
                "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Å–∫–≤–∞–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –∑–∞–±–µ—Ä–µ—Ç –ø—Ä–∏–∑ –≤ "
                "—Ä–∞–∑–º–µ—Ä–µ 5% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –±–æ—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤ —Å–∫–≤–∞–¥–∞—Ö. üí∞\n\n"
                "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–∫–≤–∞–¥—É!"
            )

            await message.answer(welcome_text, reply_markup=inline_kb)

            leader_id = message.from_user.id
            add_group_to_db(message.chat.id, leader_id, group_name)  # –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            add_user_to_squad(message.chat.id, leader_id)


            
            
@dp.message_handler(IsPrivate(), commands=["start"])
@dp.throttled(antiflood, rate=1)
async def start(message: types.Message):
    user = message.from_user
    robots = mdb.get_user_robots(user.id)
    ref = 0

    if len(message.text) > 6:
        try:
            int(message.text.split()[1])
            ref = message.text.split()[1]
        except ValueError:
            pass

    if not check_user(user.id):
        # prompt user to select language
        language_keyboard = get_language_keyboard()
        await message.answer("Please select your language:", reply_markup=language_keyboard)
        add_user(user.id, ref)
        # if ref != 0:
        #     if ref:
        #         add_refferal_balance(ref)
        #         await bot.send_message(ref,
        #                                     f'üë§ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <a href="tg://user?id={user.id}"><b>{user.first_name}</b></a> –∏ –ø–æ–ª—É—á–∏–ª–∏ <b>0.03</b> TAKE')
        #     else:
        #         print(f"Referral user with ID {ref} not found.")
    elif len(robots) == 0:
        await message.answer(translate_text(robot_chances_text(), user.id), reply_markup=get_robot_keyboard(user.id))

    elif 'joingame_' in message.text:
        game_id = message.text.split('_')[1]
        game = mdb.get_game(game_id)
        if game:
            player_id = game[3]
            if player_id != user.id:
                await join_game(user, game_id)
                return

    elif 'joinsquad_' in message.text:
        group_id = message.text.split('_')[1]
        user_id = message.from_user.id
        if add_user_to_squad(group_id, user_id):
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∫–≤–∞–¥ {group_id}!")
        else:
            await message.answer("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ!")

    else:
        await message.answer(translate_text(get_start_text(), user.id), reply_markup=create_start_keyboard(user.id))




async def join_game(user, game_id):
    game = mdb.get_game(game_id)
    player_id = game[3]

    try:
        player = await bot.get_chat(player_id)
        player = player.first_name
        player = f'<a href="tg://user?id={player_id}">{player}</a>'
    except:
        player = f'<a href="tg://user?id={player_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

    text = f'<b>#Ô∏è‚É£ –ë–æ–π –Ω–æ–º–µ—Ä:</b> #{game[0]}\n' \
           f'<b>üíé –°—Ç–∞–≤–∫–∞:</b> {game[1]} TON\n' \
           f'üìÜ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏–µ: {game[6]}\n' \
           f'<b>üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {player}\n\n' \
           f'<i>–£–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –±–æ–π?</i>'

    keyboard = await join_game_key(game[0])

    await bot.send_message(
        user.id,
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.message_handler(lambda message: message.text in [translate_text("üëù –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫", message.from_user.id), "üëù Link wallet"])
@dp.throttled(antiflood, rate=1)
async def process_wallet_request(message: types.Message):

    user_id = message.from_user.id
    wallet_address = 'EQCSvwpsHiBvdS2nxIJ77Z7D-8MNqe4vGy0ZBW50WM1WJtvO'
    comment = f'TonTakeRoBot{user_id}'

    bonus_info = (
        'üöÄ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å –Ω–∞–ª–∏—á–∏–µ–º –ù–§–¢ –¢–æ–Ω–¢–µ–π–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è'
        '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞ –∏ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É! –¢–∞–∫–∂–µ –≤–∞—à —Ä–æ–±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!'
    )

    message_text = (
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 0.01 TON —Å –∫–æ—à–µ–ª—å–∫–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–∞ –∞–¥—Ä–µ—Å '
        f'`{wallet_address}`\n\n'
        '–° –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: `{}`\n\n'
        '–í–Ω–∏–º–∞–Ω–∏–µ! –ù—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ä–æ–≤–Ω–æ 0.01 TON!\n\n'
        '–ü–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç—ë–∂".\n\n'
        .format(comment)
    )

    message_text_with_bonus = f'{message_text}\n{bonus_info}'

    await message.answer(translate_text(message_text_with_bonus, user_id), reply_markup=nft_key(message.from_user.id), parse_mode='Markdown')


@dp.message_handler(lambda message: message.text in [translate_text("üñº NFTs", message.from_user.id), "üñº NFTs"])
@dp.throttled(antiflood, rate=1)
async def process_nft_request(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    wallet = get_user_wallet(chat_id)
    if not wallet:  # Check if wallet is None or empty
        await bot.send_message(chat_id, translate_text("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ –∫ –±–æ—Ç—É", user_id))
    else:
        check_nft = check_owner_nft(address=wallet)
        if check_nft:
            text = translate_text(f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ ({wallet}) –µ—Å—Ç—å –ù–§–¢ –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!\n\n"
                                   f"üéÅ –≠—Ç–æ –¥–∞–µ—Ç –≤–∞–º —Å–ª–µ–¥—É—é—â–∏–µ –±–æ–Ω—É—Å—ã:\n"
                                   f"- 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø—Ä–æ–∫–∞—á–∫—É –Ω–∞—à–∏—Ö —Ä–æ–±–æ—Ç–æ–≤\n"
                                   f"- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ä–æ–±–æ—Ç–∞ –≤ 2 —Ä–∞–∑–∞\n"
                                   f"- –ë–æ–Ω—É—Å +1 –∫ —Å–∏–ª–µ —É–¥–∞—Ä–∞ –≤ –±–∏—Ç–≤–∞—Ö\n\n"
                                   f"–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –∏ —É–¥–∞—á–∏ –≤ –±–æ—è—Ö! üí™üéâ", user_id)
            await bot.send_message(chat_id, text)
            current_nft_status = get_user_nft_status(chat_id)
            if current_nft_status != 1:
                set_user_nft_status(chat_id, 1)
        else:
            await bot.send_message(chat_id, translate_text(f"‚ùå –ù–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ ({wallet}) –Ω–µ—Ç –ù–§–¢ –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏", user_id))
            
            set_user_nft_status(chat_id, 0)



     
def check_owner_nft(address):
    try:
        ton = TonScan()
        res = ton.unpack_address(address)
        print(res)
        if res['ok']:
            address = res['result']
            for collection in NFT_COLLECTIONS:
                collection = collection.replace('https://getgems.io/collection/', '')
                collection_items = ton.collection_items(collection)
                if address in str(collection_items):
                    return True
                    break
        return False
    except Exception as e:
        print('Err422: ', e)
        return False                        


@dp.message_handler(lambda message: message.text in [translate_text("üì∏ –°–∫–≤–∞–¥—ã", message.from_user.id), "üì∏ –°–∫–≤–∞–¥—ã"])
@dp.throttled(antiflood, rate=1)
async def team(message: types.Message):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∫–≤–∞–¥—ã TonTakeRobot! ü§ñ\n\n"
        "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–≤–∞–¥ –∏ –±–æ—Ä–æ—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ "
        "—Å–∫–∞–≤–∞–¥–∞–º–∏ –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ. üèÜ\n\n"
        "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Å–∫–≤–∞–¥ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –∑–∞–±–µ—Ä–µ—Ç –ø—Ä–∏–∑ –≤ "
        "—Ä–∞–∑–º–µ—Ä–µ 5% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –±–æ—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤ —Å–∫–≤–∞–¥–∞—Ö. üí∞\n\n"
        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∫–≤–∞–¥–∞—Ö, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å–≤–æ–π —á–∞—Ç.\n\n"
    )

    top_squads = get_top_squads(10)
    
    async def get_user_name(user_id):
        user = await bot.get_chat(user_id)
        return user.first_name

    squads_info = ""

    if top_squads:
        squads_info += "<b>–¢–æ–ø —Å–∫–≤–∞–¥–æ–≤:</b>\n\n"

        for i, (squad_id, group_name, leader_id, balance) in enumerate(top_squads, start=1):
            leader_name = await get_user_name(leader_id)
            squads_info += f"{i}. –°–∫–≤–∞–¥: {group_name}, –õ–∏–¥–µ—Ä: {leader_name}, –ë–∞–ª–∞–Ω—Å: {balance} TON\n\n"
    else:
        squads_info = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–≤–∞–¥–æ–≤."

    combined_text = welcome_text + squads_info
    await message.answer(combined_text, parse_mode='HTML')





@dp.message_handler(IsPrivate(), lambda message: message.text in [translate_text("–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–±–æ—Ç–∞ ü§ñ", message.from_user.id), "Get robot ü§ñ"])
async def get_robot_button_handler(message: types.Message):
    user = message.from_user
    ref = 0
    robots = mdb.get_user_robots(user.id)

    if len(robots) == 0:
        robot_name = give_robot_to_user(user.id)
        await message.answer(translate_text(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–æ–±–æ—Ç–∞ <b>{robot_name}</b> –≤ –ø–æ–¥–∞—Ä–æ–∫!", user.id))
        
    await message.answer(get_start_text(), reply_markup=create_start_keyboard(user.id))
        
@dp.message_handler(Text('üîô –ù–∞–∑–∞–¥', ignore_case=True), state='*')
async def back(msg: types.Message, state: FSMContext):
    user = msg.from_user
    await state.finish()
    await msg.answer(translate_text('üîô –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥', user.id), reply_markup=create_start_keyboard(user.id))
    await msg.delete()

@dp.message_handler(Text('üîôBack', ignore_case=True), state='*')
async def back(msg: types.Message, state: FSMContext):
    user = msg.from_user
    await state.finish()
    await msg.answer(translate_text('üîô –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥', user.id), reply_markup=create_start_keyboard(user.id))
    await msg.delete()



@dp.message_handler(lambda message: message.text in [translate_text("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", message.from_user.id), "üë• Referral system"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def refferal_system(msg: types.Message):
    user = msg.from_user
    username = await bot.get_me()
    refferals_count = get_refferals(msg.from_user.id)
    refferal_take_reward = refferals_count * 0.03

    text = (
        'üî• –ó–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ –≤–∞—à–µ–π '
        '—Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>+0.03 TAKE</b> –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Ä–æ–±–æ—Ç–∞!'
        '–î–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è 0.03 TAKE –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫.'
        '\n\n'
        '<i>ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</i> <b>{}</b>\nüí∞ TAKE: {:.3f}\n\nüîó <i>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>'
        ' <code>t.me/{}?start={}</code>'.format(
            refferals_count,
            refferal_take_reward,
            username['username'],
            user.id)
    )

    translated_text = translate_text(text, user.id)

    await msg.answer(translated_text, parse_mode=html)

@dp.message_handler(lambda message: message.text in ["üîº –£–ª—É—á—à–µ–Ω–∏—è", "üîº Improvements"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def upgrades(msg: types.Message):
    user = msg.from_user
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text=translate_text("üîã –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ", user.id), callback_data="info-max_health"),
        InlineKeyboardButton(text=translate_text("‚öîÔ∏è –ü–ª–∞–∑–º–µ–Ω–Ω—ã–π –º–µ—á", user.id), callback_data="info-damage"),
        InlineKeyboardButton(text=translate_text("‚öôÔ∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–º–∫–æ–º–ø–ª–µ–∫—Ç", user.id), callback_data="info-heal"),
        InlineKeyboardButton(text=translate_text("üõ° –¢–∏—Ç–∞–Ω–æ–≤–∞—è –±—Ä–æ–Ω—è", user.id), callback_data="info-armor"),
    )

    robot = mdb.get_user_active_robot(user.id)
    robot_id = robot[1]
    robot_name = robot[2]
    robot_max_health = robot[8]
    robot_damage = robot[4]
    robot_heal = robot[5]
    robot_armor = robot[6]

    nft_status = check_owner_nft(user.id)
    discount_message = ""
    if nft_status:
        discount_message = "\n<i>üè∑Ô∏è –í—ã –∏–º–µ–µ—Ç–µ 10% —Å–∫–∏–¥–∫—É –Ω–∞ –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞—à–µ–º—É –ù–§–¢!</i>"

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await msg.answer_photo(
            photo,
            f"ü§ñ {translate_text('–†–æ–±–æ—Ç', user.id)}: <b>{robot_name}</b>\n\n"
            f"<b>{translate_text('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ', user.id)}</b>\n\n"
            f"{translate_text('–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', user.id)}:\n"
            f"üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', user.id)}: <b>{robot_max_health}</b>\n"
            f"‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', user.id)}: <b>{robot_damage}</b>\n"
            f"‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', user.id)}: <b>{robot_heal}</b>\n"
            f"üõ° {translate_text('–ë—Ä–æ–Ω—è', user.id)}: <b>{robot_armor}</b>\n"
            f"{discount_message}",
            reply_markup=kb,
            parse_mode="HTML"
        )




@dp.message_handler(lambda message: message.text in [translate_text("ü§ñ –ú–æ–∏ —Ä–æ–±–æ—Ç—ã", message.from_user.id), "ü§ñ My robots"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def getrobot(msg: types.Message):
    user = msg.from_user
    robots = mdb.get_user_robots(user.id)

    if len(robots) == 0:
        await msg.answer(translate_text('üôÅ –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–±–æ—Ç–æ–≤, –∫—É–ø–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"üõí –ú–∞–≥–∞–∑–∏–Ω"</b>', user.id))
        return

    robot = robots[0]
    robot_id = robot[1]
    robot_name = robot[2]
    robot_health = robot[3]
    robot_damage = robot[4]
    robot_heal = robot[5]
    robot_armor = robot[6]
    status = robot[7]
    robot_lvl = robot[9]
    robot_max_health = robot[8]

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await msg.answer_photo(photo, f'''
ü§ñ {translate_text('–†–æ–±–æ—Ç', user.id)}: <b>{robot_name}</b>
üÜî ID: <b>{robot_id}</b>

üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', user.id)}: <b>{robot_max_health}</b>
‚ö°Ô∏è {translate_text('–ó–¥–æ—Ä–æ–≤—å–µ', user.id)}: <b>{robot_health}</b>
‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', user.id)}: <b>{robot_damage}</b>
‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', user.id)}: <b>{robot_heal}</b>
üéö  {translate_text('–£—Ä–æ–≤–µ–Ω—å —Ä–æ–±–æ—Ç–∞', user.id)}: <b>{robot_lvl}</b> 
üõ° {translate_text('–ë—Ä–æ–Ω—è', user.id)}: <b>{robot_armor}</b>''', reply_markup=await my_robots_key(0, robot_id, len(robots), status, user.id))

@dp.message_handler(lambda message: message.text in [translate_text("üíé –ë–∞–ª–∞–Ω—Å", message.from_user.id), "üíé Balance"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def getbalance(msg: types.Message, state: FSMContext):
    await state.finish()
    uid = msg.from_user.id
    user_balance = round(get_balance(uid), 5)
    take_balance = round(get_take_balance(uid), 5)

    await msg.answer(f'''üÜî {translate_text('–í–∞—à ID', uid)}: <code>{uid}</code>

<b>üíé TON:</b> {user_balance}
<b>üí∞ TAKE</b> {take_balance}''', reply_markup=deposit_key, parse_mode=html)



@dp.message_handler(lambda message: message.text in [translate_text("üèÜ –¢—É—Ä–Ω–∏—Ä", message.from_user.id), "üèÜ Tournament"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def tournament(msg: types.Message, state: FSMContext):
    await state.finish()
    uid = msg.from_user.id
    active_tour = get_active_tour()
    if active_tour is not None:
        active_tour = get_tour(active_tour[0])
        user_exist = get_tour_user_exist(uid, active_tour[0])
        if not user_exist:
            user_status = translate_text('üö´ –°—Ç–∞—Ç—Éc: <b>–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ</b>', user_id=uid)
            user_place = translate_text('–Ω–µ—Ç –º–µ—Å—Ç–∞', user_id=uid)
        else:
            user_status = translate_text('‚úÖ –°—Ç–∞—Ç—Éc: <b>–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ</b>', user_id=uid)
            user_place = get_user_place(active_tour[0], uid)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text=translate_text('‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', user_id=uid), callback_data='tour-run_' + str(active_tour[0])))
        markup.add(InlineKeyboardButton(text=translate_text('üìÅ –ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', user_id=uid), callback_data='tour_history'))

        top_users = get_tour_top_user(active_tour[0])
        count_users = get_count_tour_users(active_tour[0])
        if not count_users:
            top_users_text = translate_text('–Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', user_id=uid)
        else:
            top_users_text = ''
            for i, user in enumerate(top_users, start=1):
                top_users_text += f'{i}. üë§ <a href="tg://user?id={user[0]}">{translate_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user_id=uid)}</a> (<code>{user[0]}</code>): <b>{user[1]}</b> {translate_text("–æ—á–∫–æ–≤", user_id=uid)}\n'

        user_ball = get_user_tour_ball(active_tour[0], uid)
        await msg.answer(f'''<b>üèÜ {translate_text("–¢—É—Ä–Ω–∏—Ä", user_id=uid)} <b>‚Ññ{active_tour[0]}</b></b>

{user_status}
            
üïû {translate_text("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)} - <b>{active_tour[2]}:00 –ø–æ MSK</b>
üïî {translate_text("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)} - <b>{active_tour[3]}:00 –ø–æ MSK</b>

‚≠êÔ∏è {translate_text("–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", user_id=uid)}: <b>{count_users}</b>
üîù {translate_text("–õ–∏–¥–µ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)}: ‚§µÔ∏è
{top_users_text}
üíé {translate_text("–¶–µ–Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä", user_id=uid)}: <b>0.1</b> TON
üíµ {translate_text("–§–æ–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞", user_id=uid)}: <b>{round(count_users * 0.09, 2)}</b> TON

ü´µ {translate_text("–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ç—É—Ä–Ω–∏—Ä–µ", user_id=uid)}: <b>{user_place}</b>
‚ö°Ô∏è {translate_text("–£ –≤–∞—Å –æ—á–∫–æ–≤", user_id=uid)}: <b>{user_ball}</b>

üèÜ{translate_text("–í —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–±–µ–¥–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–Ω—ã—Ö –±–æ–µ–≤ –≤ ", user_id=uid)}"üë• {translate_text("–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–≥—Ä–µ", user_id=uid)}" <b>({translate_text("–∏–≥—Ä—ã —Å–æ —Å—Ç–∞–≤–∫–æ–π 0 TON –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è", user_id=uid)})</b>. 
‚≠êÔ∏è{translate_text("–ö–∞–∂–¥–∞—è –ø–æ–±–µ–¥–∞ –≤–∞–º –ø—Ä–∏–Ω–æ—Å–∏—Ç 1 –æ—á–∫–æ.", user_id=uid)}''',
                         reply_markup=markup, parse_mode=html)
    else:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text=translate_text('üìÅ –ò—Å—Ç–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–∞', user_id=uid), callback_data='tour_history'))
        await msg.answer(f'''<b>‚≠ïÔ∏è {translate_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π!", user_id=uid)}</b>''',
                         reply_markup=markup, parse_mode=html)


@dp.message_handler(lambda message: message.text in [translate_text("üõí –ú–∞–≥–∞–∑–∏–Ω", message.from_user.id), "üõí Shop"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def market(message: types.Message):
    user = message.from_user
    robots = mdb.get_robots()
    count_robots = len(robots)
    if count_robots == 0:
        await message.answer(translate_text('–ù–µ—Ç —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ!', message.from_user.id))
        return

    robot = robots[0]

    robot_id = robot[0]
    robot_name = robot[1]
    robot_health = robot[2]
    robot_damage = robot[3]
    robot_heal = robot[4]
    robot_armor = robot[5]
    robot_price = robot[6]

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await message.answer_photo(photo, f'''
ü§ñ {translate_text('–†–æ–±–æ—Ç', message.from_user.id)}: <b>{robot_name}</b>
üÜî 'ID': <b>{robot_id}</b>

üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', message.from_user.id)}: <b>{robot_health}</b>
‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', message.from_user.id)}: <b>{robot_damage}</b>
‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', message.from_user.id)}: <b>{robot_heal}</b>
üõ° {translate_text('–ë—Ä–æ–Ω—è', message.from_user.id)}: <b>{robot_armor}</b>

üíé <b>{translate_text('–°—Ç–æ–∏–º–æ—Å—Ç—å', message.from_user.id)} {robot_price} –¢–ê–ö–ï</b>''', reply_markup=await market_key(robot_id,
                                                                                                                    robots.index(robot) + 1,
                                                                                                                    robots.index(robot) - 1,
                                                                                                                    count_robots,
                                                                                                                    robots.index(robot),
                                                                                                                    user.id
                                                                                                                    )
                                                                                                   )
                               


@dp.message_handler(lambda message: message.text in [translate_text("üîù –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", message.from_user.id), "üîù Top players"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def get_top(msg: types.Message):
    top_lvl = new_top_lvl()
    top_bet = new_top_bet_games()
    top_refferals = get_top_refferals()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

    text = 'üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n'

    text += '<b>–ü–æ —É—Ä–æ–≤–Ω—é —Ä–æ–±–æ—Ç–∞:</b>\n'
    for i, user in enumerate(top_lvl):
        user_id = user[0]
        user_lvl = user[9]  # –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å 9 –Ω–∞ 3
        user_robot = user[2]
        try:
            player_name = await bot.get_chat(user_id)
            player_name = player_name.first_name
            player_name = f'<a href="tg://user?id={user_id}">{player_name}</a>'
        except:
            player_name = f'<a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

        text += f'{hbold(i + 1)}. {player_name} - {user_lvl} - {user_robot}\n'

    text += '\n<b>–ü–æ –ø–ª–∞—Ç–Ω—ã–º –±–æ—è–º:</b>\n'
    for i, user in enumerate(top_bet):
        user_id = user[0]
        user_bet = round(user[1], 3)
        try:
            player_name = await bot.get_chat(user_id)
            player_name = player_name.first_name
            player_name = f'<a href="tg://user?id={user_id}">{player_name}</a>'
        except:
            player_name = f'<a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

        text += f'{hbold(i + 1)}. {player_name} - {user_bet:.2f}\n'

    text += '\n<b>–ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:</b>\n'
    for i, refferal in enumerate(top_refferals):
        refferal_id = refferal[0]
        refferal_count = refferal[1]
        try:
            refferal_name = await bot.get_chat(refferal_id)
            refferal_name = refferal_name.first_name
            refferal_name = f'<a href="tg://user?id={refferal_id}">{refferal_name}</a>'
        except:
            refferal_name = f'<a href="tg://user?id={refferal_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>'

        text += f'{hbold(i + 1)}. {refferal_name} - {refferal_count}\n'

    # –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    user_lang = check_user_language(msg.from_user.id)
    if user_lang == 'en':
        text = text.replace('–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:', 'Top players:')
        text = text.replace('–ü–æ —É—Ä–æ–≤–Ω—é —Ä–æ–±–æ—Ç–∞:', 'By robot level:')
        text = text.replace('–ü–æ –ø–ª–∞—Ç–Ω—ã–º –±–æ—è–º:', 'Paid battles:')
        text = text.replace('–ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:', 'Referrals:')
        text = text.replace('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User')
    elif user_lang == 'ru':
        pass  # —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    else:
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä—É—Å—Å–∫–∏–π)
        pass

    await msg.answer(text, parse_mode='HTML')



@dp.message_handler(lambda message: message.text in [translate_text("üéÆ –ò–≥—Ä–∞—Ç—å", message.from_user.id), "üéÆ Play"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def game_match(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(KeyboardButton(translate_text("‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –±–æ–π", user_id)), KeyboardButton(translate_text("ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é", user_id)))
    keyboard.row(KeyboardButton(translate_text("üõ°Ô∏è –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏", user_id)), KeyboardButton(translate_text("üìú –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –±–æ–µ–≤", user_id)))

    keyboard.row(KeyboardButton(translate_text("üîô –ù–∞–∑–∞–¥", user_id)))
    await message.answer(translate_text('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫', user_id),
                         reply_markup=keyboard,
                         )


@dp.message_handler(text='‚öîÔ∏è Create a battle')
@dp.throttled(antiflood, rate=1)
async def create_game_0(message: types.Message):
    user_id = message.from_user.id
    await message.answer(translate_text('<b>üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –Ω–∞ –±–æ–π:</b>', user_id), reply_markup=bet_key)


@dp.message_handler(text='ü§ù Join the fight')
@dp.throttled(antiflood, rate=1)
async def join_to_game(message: types.Message):
    active_games = mdb.get_active_games()
    user_id = message.from_user.id
    if len(active_games) == 0:
        await message.answer(translate_text('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π" –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.'''), user_id)
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'join_{game[0]}'))

    await message.answer(translate_text('<b>‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', user_id), reply_markup=markup)


@dp.message_handler(text='üõ°Ô∏è My active battles')
@dp.throttled(antiflood, rate=1)
async def my_active_games(message: types.Message):
    user = message.from_user
    active_games = mdb.get_user_active_games(user.id)
    if len(active_games) == 0:
        await message.answer(translate_text('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π".'''), user.id)
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'mygame_{game[0]}'))

    await message.answer(translate_text('<b>‚öîÔ∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', user.id), reply_markup=markup)


@dp.message_handler(text='üìú History of my fights')
@dp.throttled(antiflood, rate=1)
async def game_history(message: types.Message):
    user = message.from_user
    history = mdb.get_user_all_games(user.id)
    if len(history) == 0:
        await message.answer(translate_text('''<b>‚ùå –í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –±–æ—è—Ö.</b>'''), user.id)
        return

    text = f'üìÅ History of battles of a player with ID {user.id}\n\n'
    for game in history:
        if game[5] == 0:
            winner = 'The battle has not yet started, is not finished, or has been deleted!'
        else:
            winner = game[5]

        if game[2] == 'finished':
            status = 'ENDED'
        elif game[2] == 'started':
            status = 'STARTED'
        elif game[2] == 'expectation':
            status = 'WAITING'
        else:
            status = 'DELETED'

        try:
            player1 = await bot.get_chat(game[3])
            player1 = player1.first_name

            player2 = await bot.get_chat(game[4])
            player2 = player2.first_name
        except:
            player1 = f'User'
            player2 = f'User'

        text += f'''‚öîÔ∏è –ë–æ–π –Ω–æ–º–µ—Ä #{game[0]}
üë§ Player 1: {player1} ({game[3]})
üë§ Player 2: {player2} ({game[4]})
üìå Status: {status}
üíé Bet: {game[1]} TON
üìÜ Date: {game[6]}
üëë Winner: {winner}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
'''

    with open(f'data/texts/{user.id}-history.txt', 'w', encoding='UTF-8') as file:
        file.write(text)

    input_file = InputFile(f'data/texts/{user.id}-history.txt', filename=f'{user.id}-history.txt')
    await message.answer_document(input_file, caption='Your battles history.')

    os.remove(f'data/texts/{user.id}-history.txt')


@dp.message_handler(text='‚öîÔ∏è –°–æ–∑–¥–∞—Ç—å –±–æ–π')
@dp.throttled(antiflood, rate=1)
async def create_game_0(message: types.Message):
    await message.answer('<b>üíé –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –Ω–∞ –±–æ–π:</b>', reply_markup=bet_key)


@dp.message_handler(text='ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –±–æ—é')
@dp.throttled(antiflood, rate=1)
async def join_to_game(message: types.Message):
    active_games = mdb.get_active_games()
    if len(active_games) == 0:
        await message.answer('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π" –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.''')
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'join_{game[0]}'))

    await message.answer('<b>‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', reply_markup=markup)


@dp.message_handler(text='üõ°Ô∏è –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏')
@dp.throttled(antiflood, rate=1)
async def my_active_games(message: types.Message):
    user = message.from_user
    active_games = mdb.get_user_active_games(user.id)
    if len(active_games) == 0:
        await message.answer('''<b>‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–µ–≤!</b>

üìå –ú–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ "üî∏ –°–æ–∑–¥–∞—Ç—å –±–æ–π".''')
        return

    markup = InlineKeyboardMarkup()
    for game in active_games:
        markup.add(InlineKeyboardButton(text=f'#{game[0]} | {game[1]} TON', callback_data=f'mygame_{game[0]}'))

    await message.answer('<b>‚öîÔ∏è –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ–∏:</b>', reply_markup=markup)


@dp.message_handler(text='üìú –ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –±–æ–µ–≤')
@dp.throttled(antiflood, rate=1)
async def game_history(message: types.Message):
    user = message.from_user
    history = mdb.get_user_all_games(user.id)
    if len(history) == 0:
        await message.answer('''<b>‚ùå –í—ã –µ—â–µ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –±–æ—è—Ö.</b>''')
        return

    text = f'üìÅ –ò—Å—Ç–æ—Ä–∏—è –±–æ–µ–≤ –∏–≥—Ä–æ–∫–∞ —Å ID {user.id}\n\n'
    for game in history:
        if game[5] == 0:
            winner = '–ë–æ–π –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç –∏–ª–∏ –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω!'
        else:
            winner = game[5]

        if game[2] == 'finished':
            status = '–ë–û–ô –ó–ê–ö–û–ù–ß–ï–ù'
        elif game[2] == 'started':
            status = '–ë–û–ô –ù–ê–ß–ê–¢'
        elif game[2] == 'expectation':
            status = '–í –û–ñ–ò–î–ê–ù–ò–ò'
        else:
            status = '–ë–û–ô –£–î–ê–õ–ï–ù'

        try:
            player1 = await bot.get_chat(game[3])
            player1 = player1.first_name

            player2 = await bot.get_chat(game[4])
            player2 = player2.first_name
        except:
            player1 = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            player2 = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

        text += f'''‚öîÔ∏è –ë–æ–π –Ω–æ–º–µ—Ä #{game[0]}
üë§ –ò–≥—Ä–æ–∫ 1: {player1} ({game[3]})
üë§ –ò–≥—Ä–æ–∫ 2: {player2} ({game[4]})
üìå –°—Ç–∞—Ç—É—Å: {status}
üíé –°—Ç–∞–≤–∫–∞: {game[1]} TON
üìÜ –î–∞—Ç–∞ –∏–≥—Ä—ã: {game[6]}
üëë –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
'''

    with open(f'data/texts/{user.id}-history.txt', 'w', encoding='UTF-8') as file:
        file.write(text)

    input_file = InputFile(f'data/texts/{user.id}-history.txt', filename=f'{user.id}-history.txt')
    await message.answer_document(input_file, caption='–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –±–æ–µ–≤.')

    os.remove(f'data/texts/{user.id}-history.txt')
    
@dp.message_handler(state=WithdrawTon.amount)
@dp.throttled(antiflood, rate=1)
async def process_sum(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    valid = False
    try:
        float(message.text)
        valid = True
    except ValueError:
        pass
    if valid and 0 < float(message.text) <= get_balance(user_id):
        amount = round(float(message.text), 6)
        if amount < 0.1:
            text = 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 0.1 TON!'
            await message.answer(translate_text(text, user_id))
            return
        text = f'<i>üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥</i>\n\nüíé –°—É–º–º–∞: <b>{amount}</b> TON'
        await message.answer(translate_text(text, user_id), reply_markup=await withdraw_key(amount))
        await state.finish()
    elif valid and float(message.text) > get_balance(user_id):
        text = "***–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤...***"
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()
    else:
        text = "***–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..."
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()



@dp.message_handler(state=WithdrawTake.amount)
@dp.throttled(antiflood, rate=1)
async def process_sum_take(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    valid = False
    try:
        float(message.text)
        valid = True
    except ValueError:
        pass
    if valid and 0 < float(message.text) <= get_take_balance(user_id):
        amount = round(float(message.text), 6)
        if amount < 0.1:
            text = 'üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 0.1 TAKE!'
            await message.answer(translate_text(text, user_id))
            return
        text = f'üì§ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥\n\nüíé –°—É–º–º–∞: <b>{amount}</b> TAKE'
        await message.answer(translate_text(text, user_id), reply_markup=await withdraw_key_take(amount))
        await state.finish()
    elif valid and float(message.text) > get_take_balance(user_id):
        text = "***–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤...***"
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()
    else:
        text = "***–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.*** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..."
        await message.answer(translate_text(text, user_id), parse_mode=ParseMode.MARKDOWN, reply_markup=create_start_keyboard(user_id))
        await state.finish()


@dp.message_handler(state=DepositTon.amount)
async def deposit_ton_2(message: types.Message, state: FSMContext):
    user = message.from_user
    user_id = message.from_user.id
    try:
        amount = float(message.text)
    except ValueError:
        text = '<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>'
        await message.answer(translate_text(text, user_id), reply_markup=back_key, parse_mode=html)
        return

    invoice_id, invoice_link = await create_invoice(amount, user.id, 'TONCOIN')

    if invoice_id is None:
        text = '<b>üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞, —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>'
        await message.answer(translate_text(text, user_id), parse_mode=html)
        await bot.send_message(1251379793, f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —É —é–∑–µ—Ä–∞ {user.id}\n–¢–µ–∫—Å—Ç: {invoice_link}',
                               parse_mode=html)
        await state.finish()
        return

    await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞...', reply_markup=create_start_keyboard(user.id))

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text=translate_text('üîó –û–ø–ª–∞—Ç–∏—Ç—å', user_id), url=invoice_link))
    markup.add(InlineKeyboardButton(text=translate_text('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', user_id), callback_data='check-ton_' + str(invoice_id)))

    text = '''<b>üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é TON:</b>

‚ùóÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚ùó

üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"üîó –û–ø–ª–∞—Ç–∏—Ç—å"</b> —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>!'''
    await message.answer(translate_text(text, user_id), reply_markup=markup, parse_mode=html)
    await state.finish()



@dp.message_handler(state=DepositTake.amount)
async def deposit_take_2(message: types.Message, state: FSMContext):
    user = message.from_user
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer(translate_text('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>', user.id), reply_markup=back_key, parse_mode=html)
        return

    invoice_id, invoice_link = await create_invoice(amount, user.id, 'TAKE')

    if invoice_id is None:
        await message.answer(translate_text('<b>üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞, —Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!</b>', user.id),
                             parse_mode=html)
        await bot.send_message(1251379793, f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —É —é–∑–µ—Ä–∞ {user.id}\n–¢–µ–∫—Å—Ç: {invoice_link}',
                               parse_mode=html)
        await state.finish()
        return

    await message.answer(translate_text('–û–±—Ä–∞–±–æ—Ç–∫–∞...', user.id), reply_markup=create_start_keyboard(user.id))

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='üîó –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice_link))
    markup.add(InlineKeyboardButton(text='‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='check-take_' + str(invoice_id)))
    await message.answer(f'''<b>üíé {translate_text('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é TAKE:', user.id)}</b>

‚ùóÔ∏è {translate_text('–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂', user.id)} ‚ùó

üëá {translate_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"üîó –û–ø–ª–∞—Ç–∏—Ç—å"</b> —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>!', user.id)}''',
                         reply_markup=markup, parse_mode=html)
    await state.finish()

@dp.message_handler(state=DepositCry.amount)
async def receive_amount_in_ton(message: types.Message, state: FSMContext):
    user = message.from_user
    try:
        amount = float(message.text)
    except ValueError:
        await message.answer(translate_text('<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!</b>', user.id))
        return

    await message.answer(translate_text('–û–±—Ä–∞–±–æ—Ç–∫–∞...', user.id), reply_markup=create_start_keyboard(user.id))
    invoice_id, invoice_url = await create_cry_invoice(amount, 'TON', user.id)

    if invoice_id == 'small':
        await message.answer(translate_text('<b>üö´ –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è!</b>', user.id))
        return

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton(text='üîó –û–ø–ª–∞—Ç–∏—Ç—å', url=invoice_url))
    markup.add(
        InlineKeyboardButton(text='‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data='check-cry_' + str(invoice_id)))
    await message.answer(f'''<b>üíé {translate_text('–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é TON:', user.id)}</b>

‚ùóÔ∏è {translate_text('–£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂', user.id)} ‚ùó

üëá {translate_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"üîó –û–ø–ª–∞—Ç–∏—Ç—å"</b> —á—Ç–æ –±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"</b>!', user.id)}''',
                         reply_markup=markup)
    await state.finish()


@dp.message_handler(lambda message: message.text in [translate_text("üè™ –†—ã–Ω–æ–∫", message.from_user.id), "üè™ Market"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def bazar(message: types.Message):
    robots = mdb.get_bazar_robots()
    user_id = message.from_user.id
    count_robots = len(robots)
    if count_robots == 0:
        await message.answer(translate_text('–ù–µ—Ç —Ä–æ–±–æ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ!', message.from_user.id))
        return

    robot = robots[0]

    robot_seller = robot[0]
    robot_id = robot[2]
    robot_name = robot[3]
    robot_health = robot[4]
    robot_damage = robot[5]
    robot_heal = robot[6]
    robot_armor = robot[7]
    robot_price = robot[10]
    robot_lvl = robot[8]

    with open(f'data/photos/robot_{robot_id}.png', 'rb') as photo:
        await message.answer_photo(photo, f'''
ü§ñ {translate_text('–†–æ–±–æ—Ç', message.from_user.id)}: <b>{robot_name}</b>
üë§ {translate_text('–ü—Ä–æ–¥–∞–≤–µ—Ü', message.from_user.id)}: <b>{robot_seller}</b>
üÜî 'ID': <b>{robot_id}</b>

üîã {translate_text('–ú–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ', message.from_user.id)}: <b>{robot_health}</b>
‚öîÔ∏è {translate_text('–£—Ä–æ–Ω', message.from_user.id)}: <b>{robot_damage}</b>
‚öôÔ∏è {translate_text('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', message.from_user.id)}: <b>{robot_heal}</b>
üéö  {translate_text('–£—Ä–æ–≤–µ–Ω—å —Ä–æ–±–æ—Ç–∞', message.from_user.id)}: <b>{robot_lvl}</b> 
üõ°  {translate_text('–ë—Ä–æ–Ω—è', message.from_user.id)}: <b>{robot_armor}</b>

üíé <b>{translate_text('–°—Ç–æ–∏–º–æ—Å—Ç—å', message.from_user.id)} {robot_price} –¢–ê–ö–ï</b>''', reply_markup=await bazar_key(robot_id,
                                                                                                                  robots.index(robot) + 1,
                                                                                                                  robots.index(robot) - 1,
                                                                                                                  count_robots,
                                                                                                                  robots.index(robot),
                                                                                                                  robot_seller,
                                                                                                                  user_id  
                                                                                                                  )
                                               )
                               




@dp.message_handler(lambda message: message.text in [translate_text("üè≠ –õ–æ–∫–∞—Ü–∏–∏", message.from_user.id), "üè≠ Locations"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def locations(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    keyboard = await locations_key(user_id)
    text = translate_text('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:', user_id)
    await message.answer(text, reply_markup=keyboard)

    
@dp.message_handler(lambda message: message.text in [translate_text("üïπ –ò–≥—Ä—ã –¢–ê–ö–ï", message.from_user.id), "üïπ TAKE Games"])
@dp.throttled(antiflood, rate=1)
async def games_tontake(message: types.Message):
    user_id = message.from_user.id
    language = check_user_language(user_id)

    if language == 'ru':
        button1 = InlineKeyboardButton("–ö–ª–∏–∫–µ—Ä –∑–µ—Ä–Ω–æ—Å–∫–ª–∞–¥", url="https://zernosklad.com/")
        button2 = InlineKeyboardButton("–°—Ç—Ä–∞—Ç–µ–≥–∏—è TONvsTAKE", url="https://tontake.com/")
        text = "–ó–¥–µ—Å—å –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–µ –º–æ–Ω–µ—Ç—ã! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    elif language == 'en':
        button1 = InlineKeyboardButton("Grain storage clicker", url="https://zernosklad.com/")
        button2 = InlineKeyboardButton("TONvsTAKE strategy", url="https://tontake.com/")
        text = "Here you can also play and earn take coins! Choose a game:"

    markup = InlineKeyboardMarkup(row_width=1).add(button1, button2)

    await message.answer(text, reply_markup=markup)

    
    
    
    
    
    
    
    
@dp.message_handler(Command(['a', 'admin']))
async def admin(message: Message):
    if message.from_user.id in administrators:
        take_balance = await get_all_balance('TAKE')
        ton_balance = await get_all_balance()
        # cry_ton_balance = await get_cry_balance('ton')
        await message.answer(
            f'–ê–¥–º–∏–Ω–∫–∞:\n\n–ë–∞–ª–∞–Ω—Å TAKE: <b>{take_balance}</b>\n–ë–∞–ª–∞–Ω—Å TON: <b>{ton_balance}</b>',
            reply_markup=admin_key,
            parse_mode=html
        )
    else:
        await message.answer("You don't have permission to access the admin panel.")


# @dp.message_handler(IsAdmin(), Command(['restore_robot']))
# async def restore_robots(message: Message):
#     robots = get_all_user_robots()
#     counter = 0
#     for robot in robots:
#         counter += 1
#         user_id = robot[0]
#         health = robot[1]
#         damage = robot[2]
#         heal = robot[3]
#         armor = robot[4]
#         lvl = robot[5]
#         mdb.add_robot(user_id, 999, "–¢–∏—Ç–∞–Ω", health, damage, heal, armor, lvl)
#         mdb.update_robot_status(user_id, 999)
#
#     await message.answer(f'–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–æ {counter} —Ä–æ–±–æ—Ç–æ–≤.')


@dp.message_handler(state=SendAllText.text)
async def send_to_users(message: Message, state: FSMContext):
    user.id = message.from_user.id
    users = get_users()
    bad_result = 0
    good_result = 0
    async with state.proxy() as data:
        data["text"] = message.text

    async with state.proxy() as data:
        text = data["text"]
    start_time = time.time()
    await state.finish()
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
    for user in users:
        for x in user:
            try:
                await bot.send_message(x, text, reply_markup=create_start_keyboard(user.id), parse_mode=html)
                await asyncio.sleep(0.05)
                good_result += 1
            except:
                bad_result += 1
    end_time = time.time()
    await message.answer(
        f"""<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

–ó–∞–Ω—è–ª–æ –≤—Ä–µ–º—è: <code>{round(end_time - start_time, 2)}</code> —Å–µ–∫—É–Ω–¥
–£—Å–ø–µ—à–Ω–æ: <code>{good_result}</code>
–ù–µ—É—Å–ø–µ—à–Ω–æ: <code>{bad_result}</code>""",
        parse_mode=html
    )


# –†–∞—Å—Å—ã–ª–∫–∞ c —Ñ–æ—Ç–æ
@dp.message_handler(content_types="photo", state=SendAllPhoto.photo)
async def send_to_users_photo(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.photo[0].file_id
    await bot.send_message(
        message.from_user.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_adm_key,
    )
    await SendAllPhoto.next()


@dp.message_handler(state=SendAllPhoto.text)
async def send_to_users_text(message: Message, state: FSMContext):
    users = get_users()
    bad_result = 0
    good_result = 0
    async with state.proxy() as data:
        data["text"] = message.text

    async with state.proxy() as data:
        text = data["text"]
        photo_id = data["photo"]
    start_time = time.time()
    await state.finish()
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
    for user in users:
        for x in user:
            try:
                await bot.send_photo(x, photo_id, text, reply_markup=create_start_keyboard(user.id), parse_mode=html)
                await asyncio.sleep(0.05)
                good_result += 1
            except:
                bad_result += 1

    end_time = time.time()
    await message.answer(
        f"""<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
–ó–∞–Ω—è–ª–æ –≤—Ä–µ–º—è:{end_time - start_time}
–£—Å–ø–µ—à–Ω–æ: {good_result}
–ù–µ—É—Å–ø–µ—à–Ω–æ: {bad_result}</b>""",
        parse_mode=html
    )


@dp.message_handler(state=StartTour.date)
async def start_tour_2(message: Message, state: FSMContext):
    end_date = message.text
    if ':' in end_date:
        end_date = end_date.split(':')[0]
    print(end_date)
    utc_now = datetime.datetime.now(pytz.utc)
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = utc_now.astimezone(moscow_tz)
    moscow_now = datetime.datetime.strftime(moscow_time, '%d.%m.%y %H')
    count_tour = get_count_exist_tour()
    add_tour(count_tour, moscow_now, end_date)

    await message.answer(f'‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <b>‚Ññ{count_tour}</b>', parse_mode=html)
    await state.finish()


@dp.message_handler(state=SearchUser.id)
async def user_search(message: Message, state: FSMContext):
    user_id = message.text

    if not check_user(user_id):
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ!")
        return

    ref_count = get_refferals(user_id)
    ton_balance = round(get_balance(user_id), 4)
    take_balance = round(get_take_balance(user_id), 4)

    await message.answer(
        f"""
üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <a href="tg://user?id={user_id}"><b>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b></a>

üÜî ID: <b>{user_id}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí∞ –ë–∞–ª–∞–Ω—Å TAKE: <b>{take_balance}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üíé –ë–∞–ª–∞–Ω—Å TON: <b>{ton_balance}</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{ref_count}</b>""",
        reply_markup=await admin_search_key(user_id),
        parse_mode=html
    )
    await state.finish()


@dp.message_handler(state=EditUserBalance.value)
async def edit_4(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    currency = data['currency']
    edit_type = data['edit_type']
    try:
        value = round(float(message.text), 4)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!', reply_markup=cancel_adm_key)
        return
    if edit_type == 'give' and currency == 'balance':
        add_take_balance(user_id, value)
    elif edit_type == 'give' and currency == 'ton_balance':
        add_balance(user_id, value)
    elif edit_type == 'take' and currency == 'balance':
        decrease_take_balance(user_id, value)
    elif edit_type == 'take' and currency == 'ton_balance':
        decrease_balance(user_id, value)
    await message.answer(f'<b>–£—Å–ø–µ—à–Ω–æ</b>')
    await state.finish()


@dp.message_handler(state=NewRobot.name)
async def new_robot_1(message: Message, state: FSMContext):
    name = message.text
    async with state.proxy() as data:
        data['name'] = name

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.health.set()


@dp.message_handler(state=NewRobot.health)
async def new_robot_2(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['health'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É—Ä–æ–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.damage.set()


@dp.message_handler(state=NewRobot.damage)
async def new_robot_3(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['damage'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.heal.set()


@dp.message_handler(state=NewRobot.heal)
async def new_robot_4(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['heal'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±—Ä–æ–Ω—é –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.armor.set()


@dp.message_handler(state=NewRobot.armor)
async def new_robot_5(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['armor'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Ä–æ–±–æ—Ç–∞ –≤ TAKE:</b>', reply_markup=cancel_adm_key)
    await NewRobot.price.set()


@dp.message_handler(state=NewRobot.price)
async def new_robot_6(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text

    await message.answer('‚úÖ –ü—Ä–∏–Ω—è—Ç–æ!\n\n<b>–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—Ç—å–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–±–æ—Ç–∞:</b>', reply_markup=cancel_adm_key)
    await NewRobot.photo.set()


@dp.message_handler(state=NewRobot.photo, content_types=ContentTypes.PHOTO)
async def new_robot_7(message: Message, state: FSMContext):
    photo = message.photo[-1]

    photo_id = photo.file_id

    async with state.proxy() as data:
        data['photo'] = photo_id

    robot_data = await state.get_data()
    await message.answer_photo(photo_id, f'''
–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{robot_data['name']}</b>

–ó–¥–æ—Ä–æ–≤—å–µ: <b>{robot_data['health']}</b>
–£—Ä–æ–Ω: <b>{robot_data['damage']}</b>
–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>{robot_data['heal']}</b>
–ë—Ä–æ–Ω—è: <b>{robot_data['armor']}</b>

–°—Ç–æ–∏–º–æ—Å—Ç—å <b>{robot_data['price']}</b> –¢–ê–ö–ï

<b>üëá –ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–±–æ—Ç–∞:</b>
''', reply_markup=confirm_new_robot)
    await NewRobot.confirm.set()


@dp.message_handler(state=NewRobot.confirm)
async def new_robot_8(message: Message):
    await message.answer('<b>üëÜ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ üëá</b>', reply_markup=cancel_adm_key)


@dp.message_handler(state=DeleteRobot.robot_id)
async def del_robot_2(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('ID —Ä–æ–±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=cancel_adm_key)
        return

    robot_id = message.text

    await state.update_data(robot_id=robot_id)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='confirm-delete-robot'))
    markup.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_admin'))

    await message.answer(f'‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–æ–±–æ—Ç —Å ID {robot_id}?', reply_markup=markup)

    await DeleteRobot.confirm.set()


@dp.message_handler(state=DeleteRobot.confirm)
async def delete_confirm(message: Message):
    await message.answer('<b>üëÜ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ üëá</b>', reply_markup=cancel_adm_key)
    
    

from data.functions.db_squads import get_squads_count

@dp.message_handler(lambda message: message.text in [translate_text("‚≠êÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", message.from_user.id), "‚≠êÔ∏è Statistic"], IsSubscribed())
@dp.throttled(antiflood, rate=1)
async def super_statistic(message: types.Message):
    # Calculate the number of months and days since September 27, 2023
    start_date = datetime.datetime(2023, 9, 27)

    today = datetime.datetime.today()
    diff = today - start_date
    months = diff.days // 30
    days = diff.days % 30

    # Get the number of users, battles, robots, and squads from the database
    user_count = get_user_count()
    battle_count = get_battle_count()
    robots_count = get_robots_count()
    squads_count = get_squads_count()

    # Translate the text using the user's selected language
    text = (
        f"<b>ü§ñ –ë–æ—Ç—É: {months} –º–µ—Å—è—Ü–µ–≤ {days} –¥–Ω–µ–π! üìÖ</b>\n\n"
        f"<b>–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è:</b>\n"
        f"{hbold('üë• –ù–∞—Å —É–∂–µ')} {user_count} {hbold('—á–µ–ª–æ–≤–µ–∫!')}\n"
        f"{hbold('ü§ú –ú—ã –ø—Ä–æ–≤–µ–ª–∏')} {battle_count} {hbold('–±–∏—Ç–≤!')}\n"
        f"{hbold('ü§ñ –í –∏–≥—Ä–µ —É–∂–µ')} {robots_count} {hbold('—Ä–æ–±–æ—Ç–æ–≤!')}\n"
        f"{hbold('üèÜ –í –∏–≥—Ä–µ —É–∂–µ')} {squads_count} {hbold('—Å–∫–∞–≤–∞–¥–æ–≤!')}\n"
    )
    translated_text = translate_text(text, message.from_user.id)

    # Send the statistics as a message with smileys and HTML tags
    await message.answer(
        translated_text,
        parse_mode="HTML",
    )

