class AdminAtlantidaStates(StatesGroup):
    value = State()
    prize = State()
    power = State()

@dp.callback_query_handler(text='admin_start_atlantida', state=None)
@dp.throttled(callantiflood, rate=1)
async def admin_start_atlantida(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in administrators:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await bot.answer_callback_query(
            callback_query_id=callback.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
            show_alert=True
        )
        return

    await AdminAtlantidaStates.value.set()
    await bot.send_message(
        callback.from_user.id,
        '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –ê—Ç–ª–∞–Ω—Ç–∏–¥—É:'
    )

@dp.message_handler(state=AdminAtlantidaStates.value)
async def admin_atlantida_value(message: types.Message, state: FSMContext):
    try:
        value = float(message.text)
    except ValueError:
        await bot.send_message(
            message.from_user.id,
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.'
        )
        return

    async with state.proxy() as data:
        data['value'] = value

    await AdminAtlantidaStates.next()
    await bot.send_message(
        message.from_user.id,
        f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {value}\n'
        '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ –∑–∞ –±–æ—Å—Å–∞:'
    )

@dp.message_handler(state=AdminAtlantidaStates.prize)
async def admin_atlantida_prize(message: types.Message, state: FSMContext):
    try:
        prize = float(message.text)
    except ValueError:
        await bot.send_message(
            message.from_user.id,
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.'
        )
        return

    async with state.proxy() as data:
        data['prize'] = prize

    await AdminAtlantidaStates.next()
    await bot.send_message(
        message.from_user.id,
        f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {data["value"]}\n'
        f'–ü—Ä–∏–∑: {prize}\n'
        '–í–≤–µ–¥–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Å—Å–∞ –ê—Ç–ª–∞–Ω—Ç–∏–¥—ã'
    )

@dp.message_handler(state=AdminAtlantidaStates.power)
async def admin_atlantida_power(message: types.Message, state: FSMContext):
    global atlantida_data
    try:
        power = int(message.text)
    except ValueError:
        await bot.send_message(
            message.from_user.id,
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.'
        )
        return

    async with state.proxy() as data:
        data['power'] = power

    text = (
        f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {data["value"]}\n'
        f'–ü—Ä–∏–∑: {data["prize"]}\n'
        f'–ó–¥–æ—Ä–æ–≤—å–µ —Ä–æ–±–æ—Ç–∞: {data["power"]}\n'
        '–í—Å–µ –≤–µ—Ä–Ω–æ?\n'
    )

    confirm_keyboard = types.InlineKeyboardMarkup(row_width=2)
    confirm_button = types.InlineKeyboardButton("–î–∞", callback_data="confirm_atlantida")
    cancel_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_atlantida")
    confirm_keyboard.add(confirm_button, cancel_button)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å Python
    atlantida_data = {
        "value": data["value"],
        "prize": data["prize"],
        "power": data["power"]
    }

    print("1")
    print(atlantida_data)

    await bot.send_message(
        message.from_user.id,
        text,
        reply_markup=confirm_keyboard
    )

    await state.finish()


@dp.callback_query_handler(lambda callback: callback.data in ["confirm_atlantida", "cancel_atlantida"], state=None)
async def confirm_or_cancel_atlantida(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in administrators:   # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await bot.answer_callback_query(
            callback_query_id=callback.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
            show_alert=True
        )
        return

    if callback.data == "confirm_atlantida":
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        value = atlantida_data.get('value')
        prize = atlantida_data.get('prize')
        power = atlantida_data.get('power')
        
        print("2")
        print(atlantida_data)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        set_atlantida_value(value)
        set_atlantida_prize(prize)
        set_boss_power(power)
        set_atlantida_started_to_one()

        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        atlantida_data.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        await bot.send_message(
            callback.from_user.id,
            '–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!'
        )

        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        button = types.InlineKeyboardButton(
            text="üîó –ò–≥—Ä–∞—Ç—å",
            url="https://t.me/TonTakeRoBot"
        )
        keyboard.add(button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ TAKE_CHAT
        await bot.send_message(
            TAKE_CHAT,
            f'<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í –ª–æ–∫–∞—Ü–∏–∏ –ê—Ç–ª–∞–Ω—Ç–∏–¥–∞ –∑–∞–º–µ—á–µ–Ω –Ω–æ–≤—ã–π –±–æ—Å—Å. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç <b>{prize} –¢–ê–ö–ï</b>.',
            parse_mode='HTML',
            reply_markup=keyboard
        )
    elif callback.data == "cancel_atlantida":
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
        atlantida_data.clear()

        await bot.send_message(
            callback.from_user.id,
            '–ó–∞–ø—É—Å–∫ –ê—Ç–ª–∞–Ω—Ç–∏–¥—ã –æ—Ç–º–µ–Ω–µ–Ω.'
        )

    await state.finish()